"use strict";(self.webpackChunkizanami_documentation=self.webpackChunkizanami_documentation||[]).push([[8764],{5458:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var s=a(5893),t=a(1151);const i={title:"Feature flags"},l=void 0,r={id:"concepts/index",title:"Feature flags",description:"A feature flag is a switch allowing to enable / disable application features.",source:"@site/docs/02-concepts/index.mdx",sourceDirName:"02-concepts",slug:"/concepts/",permalink:"/izanami/docs/concepts/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Feature flags"},sidebar:"tutorialSidebar",previous:{title:"Get started",permalink:"/izanami/docs/getstarted/"},next:{title:"Concepts",permalink:"/izanami/docs/usages/"}},o={},c=[{value:"Centralized VS local flags",id:"centralized-vs-local-flags",level:2},{value:"Flag types",id:"flag-types",level:2},{value:"Release flag",id:"release-flag",level:3},{value:"Ops flag",id:"ops-flag",level:3},{value:"Permission flag",id:"permission-flag",level:3},{value:"Experiment flag",id:"experiment-flag",level:3},{value:"String / number flags",id:"string--number-flags",level:3}];function d(e){const n={a:"a",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"A feature flag is a switch allowing to enable / disable application features."}),"\n",(0,s.jsxs)(n.p,{children:["Feature flags allows to ",(0,s.jsx)(n.strong,{children:"separate delivery from activation"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"This means that you can deliver an application with disabled features, and activate it only when they are ready.\nThis also means that you can disable problematic features without having to do another delivery."}),"\n",(0,s.jsxs)(n.p,{children:["It's a nice tool for OPS and SRE engineers, but it's also very usefull for developers, since feature flags allow to leverage ",(0,s.jsx)(n.strong,{children:"trunk-based developement"}),", avoiding many merges and late integration issues."]}),"\n",(0,s.jsx)(n.h2,{id:"centralized-vs-local-flags",children:"Centralized VS local flags"}),"\n",(0,s.jsx)(n.p,{children:"Feature flag logic can be entirely stored in your application, for instance by storing flag state in some database."}),"\n",(0,s.jsx)(n.p,{children:"Centralized flag solution (such as Izanami) have some important benefits:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Flags can be shared accross applications"}),"\n",(0,s.jsx)(n.li,{children:"All your flags are visible in one place"}),"\n",(0,s.jsx)(n.li,{children:"Feature flag allows to define custom activation conditions, that can be changed over time without having to deliver your application again"}),"\n",(0,s.jsx)(n.li,{children:"Managing access and rights only need to be done in one place"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"However there are no silver bullets, and centralized feature flag solutions are no exceptions:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Requesting flags states adds some overhead to your application process (this can be mitigated using ",(0,s.jsx)(n.a,{href:"../clients",children:"one of our clients"}),", or by caching flag state)"]}),"\n",(0,s.jsx)(n.li,{children:"If the centralized feature flag solution is down, your application can't access flag state anymore (you may define a default activation strategy for such cases)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"flag-types",children:"Flag types"}),"\n",(0,s.jsx)(n.p,{children:"As we've seen in previous section, feature flags are very versatile. This section presents their main use cases."}),"\n",(0,s.jsxs)(n.p,{children:["Categories are inspired by ",(0,s.jsx)("a",{href:"https://martinfowler.com/articles/feature-toggles.html",children:"this great article"})," from Pete Hodgson."]}),"\n",(0,s.jsx)(n.h3,{id:"release-flag",children:"Release flag"}),"\n",(0,s.jsx)(n.p,{children:"Realeases feature flags are used to keep features disabled while they are not ready."}),"\n",(0,s.jsx)(n.p,{children:"Using this kind of flag is a good stepping stone toward trunk-based developement and CI/CD."}),"\n",(0,s.jsx)(n.p,{children:"With Izanami, release flags can be achieved using basic flags (simple ON/OFF flags) or release date features."}),"\n",(0,s.jsx)(n.h3,{id:"ops-flag",children:"Ops flag"}),"\n",(0,s.jsx)(n.p,{children:"Ops flag are usually long living flags, that aims to be used when things go wrong."}),"\n",(0,s.jsx)(n.p,{children:"This could, for instance, be used to disable feature with high performance impact, or to put part of your information system into maintenance state."}),"\n",(0,s.jsx)(n.p,{children:"Another use for ops feature could be to cut some services during inactivity periods."}),"\n",(0,s.jsx)(n.p,{children:"With Izanami, you could implement ops flags using basic flags (simple ON/OFF flags) or time/date range features."}),"\n",(0,s.jsx)(n.h3,{id:"permission-flag",children:"Permission flag"}),"\n",(0,s.jsx)(n.p,{children:"Permission features allows to unlock new feature earlier for some users."}),"\n",(0,s.jsx)(n.p,{children:"It's a good solution for beta features."}),"\n",(0,s.jsx)(n.p,{children:"Izanami allows to implement permission flags with user list features."}),"\n",(0,s.jsx)(n.h3,{id:"experiment-flag",children:"Experiment flag"}),"\n",(0,s.jsx)(n.p,{children:"Experiment flags allows to try some features on a given proportion of your users."}),"\n",(0,s.jsx)(n.p,{children:"This could be used to test a new idea on a very small portion of your users."}),"\n",(0,s.jsx)(n.p,{children:"Izanami implement this using percentage feature."}),"\n",(0,s.jsx)(n.h3,{id:"string--number-flags",children:"String / number flags"}),"\n",(0,s.jsx)(n.p,{children:'As we\'ve seen in previous sections, flags can indicate whether a feature should be active or not. These flags are boolean flags: they can "only" be active or inactive.'}),"\n",(0,s.jsx)(n.p,{children:"Flags can also allow more values, such as strings or numbers. This allows a few more patterns:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"A/B testing"}),": you can use a string flag to indicate which version of a feature should be active. This can be used to test different versions of a feature on different users."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configuration"}),": you can use a string flag to store some configuration value. This can be used to store some configuration value that can be changed at runtime."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dynamic application customisation"}),": you can use a string flag to allow wide modification of your application at runtime. For instance string flag could be used to store css stylesheet, or js script to be executed."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,a)=>{a.d(n,{Z:()=>r,a:()=>l});var s=a(7294);const t={},i=s.createContext(t);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);