"use strict";(self.webpackChunkizanami_documentation=self.webpackChunkizanami_documentation||[]).push([[7691],{2602:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>c,default:()=>x,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var t=n(5893),l=n(1151),r=n(4866),i=n(5162);const s={title:"Java & Scala"},c=void 0,o={id:"clients/jvm",title:"Java & Scala",description:"It's simple to build your client using the APIs. If you're application is built on jvm you can also use the built-in Izanami client.",source:"@site/v1/17-clients/01-jvm.mdx",sourceDirName:"17-clients",slug:"/clients/jvm",permalink:"/izanami/v1/clients/jvm",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Java & Scala"},sidebar:"defaultSidebar",previous:{title:"Clients",permalink:"/izanami/v1/clients/"},next:{title:"React client",permalink:"/izanami/v1/clients/react"}},d={},u=[{value:"Setup the Izanami client",id:"setup-the-izanami-client",level:2},{value:"Configs client",id:"configs-client",level:2},{value:"Setup the client",id:"setup-the-client",level:3},{value:"The fetch strategy",id:"the-fetch-strategy",level:4},{value:"The fetch with cache strategy",id:"the-fetch-with-cache-strategy",level:4},{value:"The smart cache strategy",id:"the-smart-cache-strategy",level:4},{value:"Handling errors",id:"handling-errors",level:4},{value:"Client usage",id:"client-usage",level:3},{value:"Get configs for a pattern",id:"get-configs-for-a-pattern",level:4},{value:"Get one config",id:"get-one-config",level:4},{value:"Create / Update / Delete configs",id:"create--update--delete-configs",level:4},{value:"Autocreate configs",id:"autocreate-configs",level:4},{value:"Features client",id:"features-client",level:2},{value:"Setup the client",id:"setup-the-client-1",level:3},{value:"The fetch strategy",id:"the-fetch-strategy-1",level:4},{value:"The fetch with cache strategy",id:"the-fetch-with-cache-strategy-1",level:4},{value:"The smart cache strategy",id:"the-smart-cache-strategy-1",level:4},{value:"Handling errors",id:"handling-errors-1",level:4},{value:"Client usage",id:"client-usage-1",level:3},{value:"List features",id:"list-features",level:4},{value:"Check feature",id:"check-feature",level:4},{value:"Conditional code on feature",id:"conditional-code-on-feature",level:4},{value:"Create / update / delete",id:"create--update--delete",level:4},{value:"Autocreate features",id:"autocreate-features",level:4},{value:"Experiments client",id:"experiments-client",level:2},{value:"Setup the client",id:"setup-the-client-2",level:3},{value:"Variants",id:"variants",level:3},{value:"Get a variant for a client",id:"get-a-variant-for-a-client",level:4},{value:"Mark variant displayed",id:"mark-variant-displayed",level:4},{value:"Mark variant won",id:"mark-variant-won",level:4},{value:"Work with experiment",id:"work-with-experiment",level:3},{value:"Get the experiment",id:"get-the-experiment",level:4},{value:"Experiment tree",id:"experiment-tree",level:3},{value:"Exposing izanami with a Proxy",id:"exposing-izanami-with-a-proxy",level:2}];function h(e){const a={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.p,{children:"It's simple to build your client using the APIs. If you're application is built on jvm you can also use the built-in Izanami client."}),"\n",(0,t.jsx)(a.p,{children:"This client offer nice strategies for better performances."}),"\n",(0,t.jsx)(a.p,{children:"You need to add repository"}),"\n",(0,t.jsxs)(r.Z,{children:[(0,t.jsx)(i.Z,{value:"gradle",label:"Gradle",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-gradle",children:"    repositories {\n        jcenter()\n        maven {\n            url 'https://raw.githubusercontent.com/mathieuancelin/json-lib-javaslang/master/repository/releases/'\n        }\n    }\n"})})}),(0,t.jsx)(i.Z,{value:"sbt",label:"Sbt",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-sbt",children:'resolvers ++= Seq(\n  "jsonlib-repo" at "https://raw.githubusercontent.com/mathieuancelin/json-lib-javaslang/master/repository/releases",\n  Resolver.jcenterRepo\n)\n'})})})]}),"\n",(0,t.jsx)(a.p,{children:"Add the following dependency to your project"}),"\n",(0,t.jsxs)(r.Z,{children:[(0,t.jsx)(i.Z,{value:"sbt",label:"sbt",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-sbt",children:'libraryDependencies += "fr.maif" %% "izanami-client" % "1.11.0"\n'})})}),(0,t.jsx)(i.Z,{value:"maven",label:"Maven",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-xml",children:"<dependency>\n  <groupId>fr.maif</groupId>\n  <artifactId>izanami-client_2.13</artifactId>\n  <version>1.11.0</version>\n</dependency>\n"})})}),(0,t.jsx)(i.Z,{value:"gradle",label:"Gradle",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-gradle",children:"dependencies {\n  compile group: 'fr.maif', name: 'izanami-client_2.13', version: '1.11.0'\n}\n"})})})]}),"\n",(0,t.jsx)(a.p,{children:"The client can be used in java or scala. There is two distinct dsl. Be sure to import the correct one :"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:"import izanami.*;\nimport izanami.javadsl.*;\n"})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:"import izanami._\nimport izanami.scaladsl._\n"})})})]}),"\n",(0,t.jsx)(a.p,{children:"Izanami client is built with"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.a,{href:"https://www.scala-lang.org/",children:"Scala"}),": As programming language"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.a,{href:"https://akka.io/docs/",children:"Akka"}),": to handle global state, scheduler ..."]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.a,{href:"https://doc.akka.io/docs/akka-http/current/scala/http/index.html",children:"Akka http"}),": for http request, sse ..."]}),"\n"]}),"\n",(0,t.jsx)(a.p,{children:"The scaladsl rely on :"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.a,{href:"https://github.com/playframework/play-json",children:"play json"}),": for json handling"]}),"\n"]}),"\n",(0,t.jsx)(a.p,{children:"The javadsl rely on :"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.a,{href:"http://www.vavr.io/",children:"vavr"}),": For functional structures like future, either, option ..."]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.a,{href:"https://github.com/mathieuancelin/json-lib-javaslang",children:"play json java"}),": For json handling"]}),"\n"]}),"\n",(0,t.jsx)(a.h2,{id:"setup-the-izanami-client",children:"Setup the Izanami client"}),"\n",(0,t.jsx)(a.p,{children:"The first thing to do is to create a client. The client own the shared http client between config client, feature client and the experiment client."}),"\n",(0,t.jsx)(a.p,{children:"You need to create a single client for all your application."}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'izanamiClient = IzanamiClient.client(\n    system,\n    ClientConfig.create("http://localhost:8089")\n        .withClientId("xxxx")\n        .withClientIdHeaderName("Another-Client-Id-Header")\n        .withClientSecret("xxxx")\n        .withClientSecretHeaderName("Another-Client-Secret-Header")\n        .sseBackend()\n        .withDispatcher("izanami-example.blocking-io-dispatcher")\n        .withPageSize(50)\n        .withZoneId(ZoneId.of("Europe/Paris"))\n);\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'implicit val system = ActorSystem(\n  "izanami-client",\n  ConfigFactory.parseString("""\n    izanami-example.blocking-io-dispatcher {\n      type = Dispatcher\n      executor = "thread-pool-executor"\n      thread-pool-executor {\n        fixed-pool-size = 32\n      }\n      throughput = 1\n    }\n  """)\n)\n\nval client = IzanamiClient(\n  ClientConfig(\n    host = "http://localhost:9000",\n    clientId = Some("xxxx"),\n    clientIdHeaderName = "Another-Client-Id-Header",\n    clientSecret = Some("xxxx"),\n    clientSecretHeaderName = "Another-Client-Id-Header",\n    backend = SseBackend,\n    pageSize = 50,\n    zoneId = ZoneId.of("Europe/Paris"),\n    dispatcher = "izanami-example.blocking-io-dispatcher"\n  )\n)\n'})})})]}),"\n",(0,t.jsxs)(a.table,{children:[(0,t.jsx)(a.thead,{children:(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.th,{children:"Field"}),(0,t.jsx)(a.th,{children:"Description"})]})}),(0,t.jsxs)(a.tbody,{children:[(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"clientId"})}),(0,t.jsxs)(a.td,{children:["The client id to access izanami APIs see ",(0,t.jsx)(a.a,{href:"../ui#manage-api-keys",children:"Manage APIs keys"})]})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"clientSecretIdName"})}),(0,t.jsx)(a.td,{children:"A custom header for the client id"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"clientSecret"})}),(0,t.jsxs)(a.td,{children:["The client secret to access izanami APIs see ",(0,t.jsx)(a.a,{href:"../ui#manage-api-keys",children:"Manage APIs keys"})]})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"clientSecretHeaderName"})}),(0,t.jsx)(a.td,{children:"A custom header for the client secret"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"sseBackend"})}),(0,t.jsx)(a.td,{children:"Enable sse to get events from the server"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"dispatcher"})}),(0,t.jsx)(a.td,{children:"Reference a dispatcher to manage thread pool"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"pageSize"})}),(0,t.jsx)(a.td,{children:"Change the size of the pages when fetching from the server"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"zoneId"})}),(0,t.jsx)(a.td,{children:"Zone Id to handle date"})]})]})]}),"\n",(0,t.jsx)(a.h2,{id:"configs-client",children:"Configs client"}),"\n",(0,t.jsxs)(a.p,{children:["The config client is used to access the shared config in Izanami. To understand how configs work, just visit this ",(0,t.jsx)(a.a,{href:"../configs",children:"page"})]}),"\n",(0,t.jsx)(a.h3,{id:"setup-the-client",children:"Setup the client"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'ConfigClient configClient = izanamiClient.configClient(\n    Strategies.fetchStrategy(),\n    Configs.configs(\n        Config.config("my:config", Json.obj(\n            Syntax.$("value", "Fallback value")\n        ))\n    )\n);\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val configClient = client.configClient(\n  strategy = FetchStrategy(),\n  fallback = Configs(\n    "test2" -> Json.obj("value" -> 2)\n  )\n)\n'})})})]}),"\n",(0,t.jsx)(a.p,{children:"When you set up a client you have to choose a strategy :"}),"\n",(0,t.jsxs)(a.table,{children:[(0,t.jsx)(a.thead,{children:(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.th,{children:"Strategy"}),(0,t.jsx)(a.th,{children:"Description"})]})}),(0,t.jsxs)(a.tbody,{children:[(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Fetch"}),(0,t.jsx)(a.td,{children:"Call izanami for each request"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Fetch with cache"}),(0,t.jsx)(a.td,{children:"Keep response in cache"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Smart cache with polling"}),(0,t.jsx)(a.td,{children:"Keep data in memory and poll izanami to refresh the cache asynchronously."})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Smart cache with sse"}),(0,t.jsx)(a.td,{children:"Keep data in memory and refresh the cache with the events from the izanami server."})]})]})]}),"\n",(0,t.jsx)(a.h4,{id:"the-fetch-strategy",children:"The fetch strategy"}),"\n",(0,t.jsx)(a.p,{children:"The fetch strategy will call izanami for each request."}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'ConfigClient configFetchStrategy = izanamiClient.configClient(\n    Strategies.fetchStrategy(),\n    Configs.configs(\n        Config.config("my:config", Json.obj(\n            Syntax.$("value", "Fallback value")\n        ))\n    )\n);\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val configClient = client.configClient(\n  strategy = FetchStrategy(),\n  fallback = Configs(\n    "test2" -> Json.obj("value" -> 2)\n  )\n)\n'})})})]}),"\n",(0,t.jsx)(a.h4,{id:"the-fetch-with-cache-strategy",children:"The fetch with cache strategy"}),"\n",(0,t.jsx)(a.p,{children:"The fetch with cache will do dumb cache by http call. You have to provide a the max elements in cache and a TTL."}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Integer maxElementInCache = 100;\nFiniteDuration ttl = FiniteDuration.create(20, TimeUnit.MINUTES);\nConfigClient fetchWithCacheStrategy = izanamiClient.configClient(\n    Strategies.fetchWithCacheStrategy(maxElementInCache, ttl),\n    Configs.configs(\n        Config.config("my:config", Json.obj(\n            Syntax.$("value", "Fallback value")\n        ))\n    )\n);\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val strategy = IzanamiClient(\n  ClientConfig(ctx.host)\n).configClient(\n  strategy = FetchWithCacheStrategy(maxElement = 2, duration = 1.second),\n  fallback = Configs(\n    "test2" -> Json.obj("value" -> 2)\n  )\n)\n'})})})]}),"\n",(0,t.jsx)(a.h4,{id:"the-smart-cache-strategy",children:"The smart cache strategy"}),"\n",(0,t.jsx)(a.p,{children:"When you choose the smart cache, you have to provide patterns :"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'ConfigClient configClient = izanamiClient.configClient(\n    Strategies.smartCacheWithPollingStrategy(\n        FiniteDuration.create(20, TimeUnit.SECONDS),\n        "my:configs:*", "other:pattern"\n    ),\n    Configs.configs(\n        Config.config("my:config", Json.obj(\n            Syntax.$("value", "Fallback value")\n        ))\n    )\n);\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val configClient = client.configClient(\n  strategy = CacheWithPollingStrategy(\n    patterns = Seq("*"),\n    pollingInterval = 3.second\n  ),\n  fallback = fallback\n)\n'})})})]}),"\n",(0,t.jsx)(a.p,{children:"The client will cache all the configs matching this patterns."}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"With a poll strategy, the client will request the server to get change so you have to set a delay."}),"\n",(0,t.jsx)(a.li,{children:"With a SSE strategy, the client will listen events from the server to refresh the cache."}),"\n"]}),"\n",(0,t.jsx)(a.p,{children:"::: warning"}),"\n",(0,t.jsx)(a.p,{children:"There is no TTL using this strategy so you have to choose the right patterns to be sure that all datas fit in memory."}),"\n",(0,t.jsx)(a.p,{children:":::"}),"\n",(0,t.jsx)(a.h4,{id:"handling-errors",children:"Handling errors"}),"\n",(0,t.jsx)(a.p,{children:"An error handling strategy could be provided. You can choose between :"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"RecoverWithFallback"}),": If the call crash, the fallback is used"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"Crash"}),": The call will finish on error if an error occurred while evaluating the feature, config or experiment."]}),"\n"]}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:"ConfigClient configErrorStrategy = izanamiClient.configClient(\n    Strategies.fetchStrategy(ErrorStrategies.crash())\n);\n"})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val configClient = izanamiClient.configClient(\n  strategy = FetchStrategy(Crash),\n  fallback = Configs(\n    "test2" -> Json.obj("value" -> 2)\n  )\n)\n'})})})]}),"\n",(0,t.jsx)(a.h3,{id:"client-usage",children:"Client usage"}),"\n",(0,t.jsx)(a.h4,{id:"get-configs-for-a-pattern",children:"Get configs for a pattern"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Future<Configs> futureConfigs = configClient.configs("my:*");\nfutureConfigs.onSuccess((Configs configs) -> {\n  JsValue config = configs.config("my:config");\n  System.out.println(config.field("value").asString());\n});\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val configs: Future[Configs] = configClient.configs("*")\nconfigs.onComplete {\n  case Success(c) => println(c)\n  case Failure(e) => e.printStackTrace()\n}\n'})})})]}),"\n",(0,t.jsx)(a.h4,{id:"get-one-config",children:"Get one config"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Future<JsValue> futureConfig = configClient.config("my:config");\nfutureConfig.onSuccess((JsValue config) -> {\n  System.out.println(config.field("value").asString());\n});\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val futureConfig: Future[JsValue] = izanamiClient.config("test")\nfutureConfig.onComplete {\n  case Success(c) => println(c)\n  case Failure(e) => e.printStackTrace()\n}\n'})})})]}),"\n",(0,t.jsx)(a.h4,{id:"create--update--delete-configs",children:"Create / Update / Delete configs"}),"\n",(0,t.jsx)(a.p,{children:"Create config using json"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'JsValue createdJson = configClient.createConfig("my:config", Json.obj(Syntax.$("value", "A configuration"))).get();\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val configCreated = client.createConfig("test", Json.obj("value" -> 1))\n'})})})]}),"\n",(0,t.jsx)(a.p,{children:"Create config using a config object"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Config created = configClient.createConfig(Config.config("my:config", Json.obj(Syntax.$("value", "A configuration")))).get();\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val jsoncreated = client.createConfig(Config("test", Json.obj("value" -> 1)))\n'})})})]}),"\n",(0,t.jsx)(a.p,{children:"Update config using json"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'JsValue updatedJson = configClient.updateConfig("my:previous:config", "my:config", Json.obj(Syntax.$("value", "A configuration"))).get();\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val configUpdated = client.updateConfig("test", "newtest", Json.obj("value" -> 1))\n'})})})]}),"\n",(0,t.jsx)(a.p,{children:"Update config using a config object"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Config updated = configClient.updateConfig("my:previous:config", Config.config("my:config", Json.obj(Syntax.$("value", "A configuration")))).get();\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val configUpdated = client.updateConfig("test", Config("newtest", Json.obj("value" -> 1)))\n'})})})]}),"\n",(0,t.jsx)(a.p,{children:"Delete a config"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Done deleted = configClient.deleteConfig("my:config").get();\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val configDeleted = client.deleteConfig("test")\n'})})})]}),"\n",(0,t.jsx)(a.h4,{id:"autocreate-configs",children:"Autocreate configs"}),"\n",(0,t.jsxs)(a.p,{children:["You can autocreate configs that are define as fallback. To enable this you need set the ",(0,t.jsx)(a.code,{children:"autocreate"})," parameter when the client is created."]}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Boolean autocreate = true;\nConfigClient configClient = izanamiClient.configClient(\n    Strategies.fetchStrategy(),\n    Configs.configs(\n        Config.config("my:config", Json.obj(\n            Syntax.$("value", "Fallback value")\n        ))\n    ),\n    autocreate\n);\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val izanamiClient = client.configClient(\n  strategy = Strategies.fetchStrategy(),\n  fallback = Configs(\n    "test" -> Json.obj("value" -> 2)\n  ),\n  autocreate = true\n)\n'})})})]}),"\n",(0,t.jsx)(a.h2,{id:"features-client",children:"Features client"}),"\n",(0,t.jsxs)(a.p,{children:["To understand how features work, just visit this ",(0,t.jsx)(a.a,{href:"../features",children:"page"})]}),"\n",(0,t.jsx)(a.h3,{id:"setup-the-client-1",children:"Setup the client"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'FeatureClient featureClient = izanamiClient.featureClient(\n    Strategies.fetchStrategy(),\n    Features.features(\n        Features.feature("my:feature", false)\n    )\n);\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val featureClient = client.featureClient(\n  strategy = FetchStrategy(),\n  fallback = Features(\n    DefaultFeature("test2", true)\n  )\n)\n'})})})]}),"\n",(0,t.jsx)(a.p,{children:"When you set up a client you have to choose a strategy :"}),"\n",(0,t.jsxs)(a.table,{children:[(0,t.jsx)(a.thead,{children:(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.th,{children:"Strategy"}),(0,t.jsx)(a.th,{children:"Description"})]})}),(0,t.jsxs)(a.tbody,{children:[(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Fetch"}),(0,t.jsx)(a.td,{children:"Call izanami for each request"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Fetch with cache"}),(0,t.jsx)(a.td,{children:"Keep response in cache"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Smart cache with polling"}),(0,t.jsx)(a.td,{children:"Keep data in memory and poll izanami to refresh the cache asynchronously. The features that need a context are not cached because it can needs a huge amount of memory"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Smart cache with sse"}),(0,t.jsx)(a.td,{children:"Keep data in memory and refresh the cache with the events from the izanami server. The features that need a context are not cached because it can needs a huge amount of memory"})]})]})]}),"\n",(0,t.jsx)(a.h4,{id:"the-fetch-strategy-1",children:"The fetch strategy"}),"\n",(0,t.jsx)(a.p,{children:"The fetch strategy will call izanami for each request"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'FeatureClient featureClient = izanamiClient.featureClient(\n    Strategies.fetchStrategy(),\n    Features.features(\n        Features.feature("my:feature", false)\n    )\n);\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:"val strategy = IzanamiClient(\n  ClientConfig(host, pageSize = 2)\n).featureClient(\n  Strategies.fetchStrategy()\n)\n"})})})]}),"\n",(0,t.jsx)(a.h4,{id:"the-fetch-with-cache-strategy-1",children:"The fetch with cache strategy"}),"\n",(0,t.jsx)(a.p,{children:"The fetch with cache will do dumb cache by http call. You have to provide a the max elements in cache and a TTL."}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Integer maxElementInCache = 100;\nFiniteDuration ttl = FiniteDuration.create(20, TimeUnit.MINUTES);\nFeatureClient featureClientWithCache = izanamiClient.featureClient(\n    Strategies.fetchWithCacheStrategy(maxElementInCache, ttl),\n    Features.features(\n        Features.feature("my:feature", false)\n    )\n);\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val strategy = IzanamiClient(\n  ClientConfig(ctx.host)\n).featureClient(\n  strategy = FetchWithCacheStrategy(maxElement = 2, duration = 1.second),\n  fallback = Features(\n    DefaultFeature("test2", true)\n  )\n)\n'})})})]}),"\n",(0,t.jsx)(a.h4,{id:"the-smart-cache-strategy-1",children:"The smart cache strategy"}),"\n",(0,t.jsx)(a.p,{children:"When you choose the smart cache, you have to provide patterns to select the keys that will be in cache:"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'FeatureClient featureClient = izanamiClient.featureClient(\n    Strategies.smartCacheWithSseStrategy(\n        scala.Option.apply(FiniteDuration.create(1, TimeUnit.MINUTES)),\n        "my:features:*", "other:pattern"\n    ),\n    Features.features(\n        Features.feature("my:feature", false)\n    )\n);\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val featureClient = client.featureClient(\n  strategy = CacheWithPollingStrategy(\n    patterns = Seq("*"),\n    pollingInterval = 3.second\n  ),\n  fallback = Features(fallback: _*)\n)\n'})})})]}),"\n",(0,t.jsx)(a.p,{children:"The client will cache all the configs matching this patterns."}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"With a poll strategy, the client will request the server to get change so you have to set a delay."}),"\n",(0,t.jsx)(a.li,{children:"With a SSE strategy, the client will listen events from the server to refresh the cache."}),"\n"]}),"\n",(0,t.jsx)(a.p,{children:"::: note"}),"\n",(0,t.jsx)(a.p,{children:"The feature that need a context to be evaluated are not cached. The cache is used only for simple features or feature with release date."}),"\n",(0,t.jsx)(a.p,{children:":::"}),"\n",(0,t.jsx)(a.p,{children:"::: warning"}),"\n",(0,t.jsx)(a.p,{children:"There is no TTL using this strategy so you have to choose the right patterns to be sure that all datas fit in memory."}),"\n",(0,t.jsx)(a.p,{children:":::"}),"\n",(0,t.jsx)(a.h4,{id:"handling-errors-1",children:"Handling errors"}),"\n",(0,t.jsx)(a.p,{children:"An error handling strategy could be provided. You can choose between :"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"RecoverWithFallback"}),": If the call crash, the fallback is used"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.code,{children:"Crash"}),": The call will finish on error if an error occurred while evaluating the feature, config or experiment."]}),"\n"]}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:"FeatureClient featureClientWithErrorHandling = izanamiClient.featureClient(\n    Strategies.fetchStrategy(ErrorStrategies.crash())\n);\n"})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:"val featureClient = izanamiClient.featureClient(\n  FetchStrategy(Crash)\n)\n"})})})]}),"\n",(0,t.jsx)(a.h3,{id:"client-usage-1",children:"Client usage"}),"\n",(0,t.jsx)(a.h4,{id:"list-features",children:"List features"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Future<Features> futureFeatures = featureClient.features("my:feature:*");\n\nfutureFeatures.onSuccess(features -> {\n  boolean active = features.isActive("my:feature:test");\n  if (active) {\n    System.out.println("Feature my:feature:test is active");\n  } else {\n    System.out.println("Feature my:feature:test is active");\n  }\n  JsObject tree = features.tree();\n  System.out.println("Tree is " + Json.prettyPrint(tree));\n});\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val futureFeatures: Future[Features] = featureClient.features("*")\nfutureFeatures.onComplete {\n  case Success(features) =>\n    val active: Boolean = features.isActive("test")\n    if (active)\n      println(s"Feature test is active")\n    else\n      println(s"Feature test is not active")\n\n    val tree: JsObject = features.tree()\n    println(s"All features: ${Json.prettyPrint(tree)}")\n\n  case Failure(e) =>\n    e.printStackTrace()\n}\n'})})})]}),"\n",(0,t.jsx)(a.h4,{id:"check-feature",children:"Check feature"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Future<Boolean> futureCheck = featureClient.checkFeature("my:feature");\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val futureCheck: Future[Boolean] = featureClient.checkFeature("test")\n'})})})]}),"\n",(0,t.jsx)(a.p,{children:"If the feature needs a context to be evaluated:"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Future<Boolean> futureCheckContext = featureClient.checkFeature("my:feature", Json.obj(\n    Syntax.$("context", true)\n));\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val context                           = Json.obj("context" -> true)\nval checkWithContext: Future[Boolean] = featureClient.checkFeature("test", context)\n'})})})]}),"\n",(0,t.jsx)(a.h4,{id:"conditional-code-on-feature",children:"Conditional code on feature"}),"\n",(0,t.jsx)(a.p,{children:"This execute a code and return a value if a feature is active:"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Future<String> conditional = featureClient.featureOrElse("my:feature",\n    () -> "Feature is active",\n    () -> "Feature is not active"\n);\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val conditional: Future[String] = featureClient.featureOrElse("test") {\n  "Feature is active"\n} {\n  "Feature is not active"\n}\n'})})})]}),"\n",(0,t.jsx)(a.p,{children:"Or with a context"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Future<String> conditionalContext = featureClient.featureOrElse(\n    "my:feature",\n    Json.obj(Syntax.$("context", true)),\n    () -> "Feature is active",\n    () -> "Feature is not active"\n);\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val conditionalWithContext: Future[String] = featureClient.featureOrElse("test", context) {\n  "Feature is active"\n} {\n  "Feature is not active"\n}\n'})})})]}),"\n",(0,t.jsx)(a.h4,{id:"create--update--delete",children:"Create / update / delete"}),"\n",(0,t.jsx)(a.p,{children:"With the client you can mutate features."}),"\n",(0,t.jsx)(a.p,{children:"Create with raw data:"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Feature createdJson = featureClient.createJsonFeature(\n    "my:feature",\n    true,\n    Features.hourRangeType(),\n    Option.of(Json.obj(\n        Syntax.$("startAt", "05:25"),\n        Syntax.$("endAt", "16:30")\n    ))\n).get();\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'Feature createdJson = featureClient.createJsonFeature(\n    "my:feature",\n    true,\n    Features.hourRangeType(),\n    Option.of(Json.obj(\n        Syntax.$("startAt", "05:25"),\n        Syntax.$("endAt", "16:30")\n    ))\n).get();\n'})})})]}),"\n",(0,t.jsx)(a.p,{children:"Or with a feature object:"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Feature created = featureClient.createFeature(\n    Features.hourRange("my:feature", true, LocalTime.of(5, 25), LocalTime.of(16, 30))\n).get();\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val featureCreated = featureClient.createFeature(\n  DateRangeFeature("test2", true, LocalDateTime.of(2019, 4, 12, 0, 0, 0), LocalDateTime.of(2019, 5, 13, 0, 0, 0))\n)\n'})})})]}),"\n",(0,t.jsx)(a.p,{children:"Update a feature :"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Feature updated = featureClient.updateFeature("my:previous:feature", Features.hourRange("my:feature:test", true, LocalTime.of(5, 25), LocalTime.of(16, 30))).get();\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val featureCreated = featureClient.updateFeature(\n  "test",\n  DateRangeFeature("test2", true, LocalDateTime.of(2019, 4, 12, 0, 0, 0), LocalDateTime.of(2019, 5, 13, 0, 0, 0))\n)\n'})})})]}),"\n",(0,t.jsx)(a.p,{children:"Delete a feature :"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Done deleted = featureClient.deleteFeature("my:feature").get();\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val deleted = featureClient.deleteFeature("test")\n'})})})]}),"\n",(0,t.jsx)(a.p,{children:"You can also activate or deactivate a feature"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Feature activated = featureClient.switchFeature("my:feature", true).get();\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val activated = featureClient.switchFeature("test", false)\n'})})})]}),"\n",(0,t.jsx)(a.h4,{id:"autocreate-features",children:"Autocreate features"}),"\n",(0,t.jsxs)(a.p,{children:["You can autocreate features that are define as fallback. To enable this you need set the ",(0,t.jsx)(a.code,{children:"autocreate"})," parameter when the client is created."]}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Boolean autocreate = true;\nFeatureClient featureClient = izanamiClient.featureClient(\n    Strategies.fetchStrategy(),\n    Features.features(\n        Features.feature("my:feature", false)\n    ),\n    autocreate\n);\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:"val featureClient = client\n  .featureClient(\n    FetchStrategy(Crash),\n    autocreate = true,\n    fallback = Features(feature)\n  )\n"})})})]}),"\n",(0,t.jsx)(a.h2,{id:"experiments-client",children:"Experiments client"}),"\n",(0,t.jsxs)(a.p,{children:["To understand how experiments work, just visit this ",(0,t.jsx)(a.a,{href:"../experiments",children:"page"})]}),"\n",(0,t.jsx)(a.h3,{id:"setup-the-client-2",children:"Setup the client"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:"ExperimentsClient experimentsClient = izanamiClient.experimentClient(Strategies.fetchStrategy());\n"})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:"val experimentClient = IzanamiClient(ClientConfig(host))\n  .experimentClient(Strategies.fetchStrategy())\n"})})})]}),"\n",(0,t.jsx)(a.p,{children:"For experiments, there is only two strategies available : fetch or dev."}),"\n",(0,t.jsx)(a.h3,{id:"variants",children:"Variants"}),"\n",(0,t.jsx)(a.h4,{id:"get-a-variant-for-a-client",children:"Get a variant for a client"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Future<Option<Variant>> futureVariant = experimentsClient.getVariantFor("my:experiment", "clientId");\nfutureVariant.onSuccess(mayBeVariant ->\n    Match(mayBeVariant).of(\n        Case($Some($()), exist -> {\n          String phrase = "Variant is " + exist;\n          System.out.println(phrase);\n          return phrase;\n        }),\n        Case($None(), __ -> {\n          String phrase = "Variant not found";\n          System.out.println(phrase);\n          return phrase;\n        })\n    )\n);\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val mayBeFutureVariant: Future[Option[Variant]] = experimentClient.getVariantFor("test", "client1")\nmayBeFutureVariant.onComplete {\n  case Success(mayBeVariant) => println(mayBeVariant)\n  case Failure(e)            => e.printStackTrace()\n}\n'})})})]}),"\n",(0,t.jsx)(a.h4,{id:"mark-variant-displayed",children:"Mark variant displayed"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Future<ExperimentVariantDisplayed> futureDisplayed = experimentsClient.markVariantDisplayed("my:experiment", "clientId");\nfutureDisplayed.onSuccess(event ->\n    System.out.println(event)\n);\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val futureDisplayed: Future[ExperimentVariantDisplayed] =\n  experimentClient.markVariantDisplayed("test", "client1")\nfutureDisplayed.onComplete {\n  case Success(event) => println(event)\n  case Failure(e)     => e.printStackTrace()\n}\n'})})})]}),"\n",(0,t.jsx)(a.h4,{id:"mark-variant-won",children:"Mark variant won"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Future<ExperimentVariantWon> futureWon = experimentsClient.markVariantWon("my:experiment", "clientId");\nfutureWon.onSuccess(event ->\n    System.out.println(event)\n);\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val futureWon: Future[ExperimentVariantWon] = experimentClient.markVariantWon("test", "client1")\nfutureWon.onComplete {\n  case Success(event) => println(event)\n  case Failure(e)     => e.printStackTrace()\n}\n'})})})]}),"\n",(0,t.jsx)(a.h3,{id:"work-with-experiment",children:"Work with experiment"}),"\n",(0,t.jsx)(a.h4,{id:"get-the-experiment",children:"Get the experiment"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Future<Option<ExperimentClient>> futureExperiment = experimentsClient.experiment("my:experiment");\nfutureExperiment.onSuccess(mayBeExperiment ->\n    Match(mayBeExperiment).of(\n        Case($Some($()), exist -> {\n          String phrase = "Experiment is " + exist;\n          System.out.println(phrase);\n          return phrase;\n        }),\n        Case($None(), __ -> {\n          String phrase = "Experiment not found";\n          System.out.println(phrase);\n          return phrase;\n        })\n    )\n);\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val futureExperiment: Future[Option[ExperimentClient]] = experimentClient.experiment("test")\nfutureExperiment.onComplete {\n  case Success(Some(exp)) => println(s"Experiment is $exp")\n  case Success(None)      => println("Experiment not Found")\n  case Failure(e)         => e.printStackTrace()\n}\n'})})})]}),"\n",(0,t.jsx)(a.p,{children:"Once you get the experiment, you can get a variant for a client, mark variant displayed or mark variant won :"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'ExperimentClient experiment = mayExperiment.get();\nFuture<Option<Variant>> clientId = experiment.getVariantFor("clientId");\nFuture<ExperimentVariantDisplayed> displayed = experiment.markVariantDisplayed("clientId");\nFuture<ExperimentVariantWon> won = experiment.markVariantWon("clientId");\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val experiment: ExperimentClient                  = mayBeExperiment.get\nval futureVariant: Future[Option[Variant]]        = experiment.getVariantFor("client1")\nval displayed: Future[ExperimentVariantDisplayed] = experiment.markVariantDisplayed("client1")\nval won: Future[ExperimentVariantWon]             = experiment.markVariantWon("client1")\n'})})})]}),"\n",(0,t.jsx)(a.h3,{id:"experiment-tree",children:"Experiment tree"}),"\n",(0,t.jsx)(a.p,{children:"You can get the experiments tree with associated variant for a client :"}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Future<JsValue> futureTree = experimentsClient.tree("*", "clientId");\nfutureTree.onSuccess(tree -> {\n  assertThat(tree).isEqualTo(\n      Json.obj(\n          Syntax.$("my", Json.obj(\n              Syntax.$("experiment", Json.obj(\n                  Syntax.$("variant", "A")\n              ))\n          ))\n      )\n  );\n});\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val experimentsTree = client.tree("*", "client1").futureValue\nexperimentsTree must be(\n  Json.obj(\n    "izanami" -> Json.obj(\n      "ab" -> Json.obj(\n        "test" -> Json.obj(\n          "variant" -> "A"\n        )\n      )\n    )\n  )\n)\nval experimentsTree = client.tree("*", "client1").futureValue\nexperimentsTree must be(\n  Json.obj()\n)\n'})})})]}),"\n",(0,t.jsx)(a.h2,{id:"exposing-izanami-with-a-proxy",children:"Exposing izanami with a Proxy"}),"\n",(0,t.jsx)(a.p,{children:"When you have to use Izanami from the client side, you can't call Izanami directly from the browser because it means the API keys are exposed to anyone."}),"\n",(0,t.jsx)(a.p,{children:"The best solution is to use your backend as a proxy. You can do this with the jvm client."}),"\n",(0,t.jsxs)(r.Z,{groupId:"javascala",children:[(0,t.jsx)(i.Z,{value:"java",label:"Java",default:!0,children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'ConfigClient configClient = izanamiClient.configClient(\n    Strategies.dev(),\n    Configs.configs(\n        Config.config("configs:test", Json.obj(\n            Syntax.$("value", 2)\n        ))\n    )\n);\nFeatureClient featureClient = izanamiClient.featureClient(\n    Strategies.dev(),\n    Features.features(\n        Features.feature("features:test1", true)\n    )\n);\nExperimentsClient experimentsClient = izanamiClient.experimentClient(\n    Strategies.dev(),\n    Experiments.create(\n        ExperimentFallback.create(\n            "experiments:id",\n            "Experiment",\n            "An Experiment",\n            true,\n            Variant.create("A", "Variant A", scala.Option.apply("Variant A"))\n        )));\n\nProxy proxy = izanamiClient.proxy()\n    .withConfigClient(configClient)\n    .withConfigPattern("configs:*")\n    .withFeatureClient(featureClient)\n    .withFeaturePattern("features:*")\n    .withExperimentsClient(experimentsClient)\n    .withExperimentPattern("experiments:*");\n\nFuture<Tuple2<Integer, JsValue>> fJsonResponse = proxy.statusAndJsonResponse();\nfJsonResponse.onSuccess(t ->\n    System.out.println("Code = " + t._1 + ", json body = " + t._2)\n);\n\n//Or with string response and additional infos :\nFuture<Tuple2<Integer, String>> fStringResponse = proxy.statusAndStringResponse(Json.obj().with("id", "ragnard.lodbrock@gmail.com"), "ragnard.lodbrock@gmail.com");\nfStringResponse.onSuccess(t ->\n    System.out.println("Code = " + t._1 + ", string body = " + t._2)\n);\n// Experiment proxy\n\nFuture<Tuple2<Integer, JsValue>> markVariantDisplayed = proxy.markVariantDisplayed("experiments:id", "ragnars.lodbrock@gmail.com");\nFuture<Tuple2<Integer, JsValue>> markVariantWon = proxy.markVariantWon("experiments:id", "ragnars.lodbrock@gmail.com");\n'})})}),(0,t.jsx)(i.Z,{value:"scala",label:"Scala",children:(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",children:'val client = IzanamiClient(\n  ClientConfig("")\n)\n\nval featureClient: FeatureClient = client.featureClient(\n  strategy = Strategies.dev(),\n  fallback = Features(\n    DefaultFeature("features:test1", true)\n  )\n)\n\nval configClient: ConfigClient = client.configClient(\n  Strategies.dev(),\n  fallback = Configs(\n    "configs:test" -> Json.obj("value" -> 2)\n  )\n)\n\nval experimentsClient: ExperimentsClient = client.experimentClient(\n  strategy = Strategies.dev(),\n  fallback = Experiments(\n    ExperimentFallback(\n      "experiments:id",\n      "Experiment",\n      "An experiment",\n      true,\n      Variant("A", "Variant A", Some("Variant A"))\n    )\n  )\n)\n\nval proxy: Proxy = client\n  .proxy()\n  .withConfigClient(configClient)\n  .withConfigPattern("configs:*")\n  .withFeatureClient(featureClient)\n  .withFeaturePattern("features:*")\n  .withExperimentsClient(experimentsClient)\n  .withExperimentPattern("experiments:*")\n\nval fResponseJson: Future[(Int, JsValue)] = proxy.statusAndJsonResponse()\nfResponseJson.onComplete {\n  case Success((status, responseBody)) =>\n    println(s"Izanami respond with status $status and json body $responseBody")\n  case _ => println("Oups something wrong happened")\n}\n\n//Or for a string response and additional infos\nval fResponseString: Future[(Int, String)] = proxy.statusAndStringResponse(\n  context = Some(Json.obj("user" -> "ragnard.lodbrock@gmail.com")),\n  userId = Some("ragnard.lodbrock@gmail.com")\n)\nfResponseString.onComplete {\n  case Success((status, responseBody)) =>\n    println(s"Izanami respond with status $status and string body $responseBody")\n  case _ => println("Oups something wrong happened")\n}\n\n// Experiment proxy\n\nval fDisplayed: Future[(Int, JsValue)] =\n  proxy.markVariantDisplayed("experiments:id", "ragnard.lodbrock@gmail.com")\nval fWon: Future[(Int, JsValue)] = proxy.markVariantWon("experiments:id", "ragnard.lodbrock@gmail.com")\n'})})})]})]})}function x(e={}){const{wrapper:a}={...(0,l.a)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},5162:(e,a,n)=>{n.d(a,{Z:()=>i});n(7294);var t=n(6905);const l={tabItem:"tabItem_Ymn6"};var r=n(5893);function i(e){let{children:a,hidden:n,className:i}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,t.Z)(l.tabItem,i),hidden:n,children:a})}},4866:(e,a,n)=>{n.d(a,{Z:()=>b});var t=n(7294),l=n(6905),r=n(2466),i=n(6550),s=n(469),c=n(1980),o=n(7392),d=n(12);function u(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:a,children:n}=e;return(0,t.useMemo)((()=>{const e=a??function(e){return u(e).map((e=>{let{props:{value:a,label:n,attributes:t,default:l}}=e;return{value:a,label:n,attributes:t,default:l}}))}(n);return function(e){const a=(0,o.l)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,n])}function x(e){let{value:a,tabValues:n}=e;return n.some((e=>e.value===a))}function g(e){let{queryString:a=!1,groupId:n}=e;const l=(0,i.k6)(),r=function(e){let{queryString:a=!1,groupId:n}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:a,groupId:n});return[(0,c._X)(r),(0,t.useCallback)((e=>{if(!r)return;const a=new URLSearchParams(l.location.search);a.set(r,e),l.replace({...l.location,search:a.toString()})}),[r,l])]}function j(e){const{defaultValue:a,queryString:n=!1,groupId:l}=e,r=h(e),[i,c]=(0,t.useState)((()=>function(e){let{defaultValue:a,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!x({value:a,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:a,tabValues:r}))),[o,u]=g({queryString:n,groupId:l}),[j,p]=function(e){let{groupId:a}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(a),[l,r]=(0,d.Nk)(n);return[l,(0,t.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:l}),f=(()=>{const e=o??j;return x({value:e,tabValues:r})?e:null})();(0,s.Z)((()=>{f&&c(f)}),[f]);return{selectedValue:i,selectValue:(0,t.useCallback)((e=>{if(!x({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);c(e),u(e),p(e)}),[u,p,r]),tabValues:r}}var p=n(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var m=n(5893);function v(e){let{className:a,block:n,selectedValue:t,selectValue:i,tabValues:s}=e;const c=[],{blockElementScrollPositionUntilNextRender:o}=(0,r.o5)(),d=e=>{const a=e.currentTarget,n=c.indexOf(a),l=s[n].value;l!==t&&(o(a),i(l))},u=e=>{let a=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;a=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;a=c[n]??c[c.length-1];break}}a?.focus()};return(0,m.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},a),children:s.map((e=>{let{value:a,label:n,attributes:r}=e;return(0,m.jsx)("li",{role:"tab",tabIndex:t===a?0:-1,"aria-selected":t===a,ref:e=>c.push(e),onKeyDown:u,onClick:d,...r,className:(0,l.Z)("tabs__item",f.tabItem,r?.className,{"tabs__item--active":t===a}),children:n??a},a)}))})}function y(e){let{lazy:a,children:n,selectedValue:l}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(a){const e=r.find((e=>e.props.value===l));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,m.jsx)("div",{className:"margin-top--md",children:r.map(((e,a)=>(0,t.cloneElement)(e,{key:a,hidden:e.props.value!==l})))})}function C(e){const a=j(e);return(0,m.jsxs)("div",{className:(0,l.Z)("tabs-container",f.tabList),children:[(0,m.jsx)(v,{...e,...a}),(0,m.jsx)(y,{...e,...a})]})}function b(e){const a=(0,p.Z)();return(0,m.jsx)(C,{...e,children:u(e.children)},String(a))}},1151:(e,a,n)=>{n.d(a,{Z:()=>s,a:()=>i});var t=n(7294);const l={},r=t.createContext(l);function i(e){const a=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),t.createElement(r.Provider,{value:a},e.children)}}}]);