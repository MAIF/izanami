"use strict";(self.webpackChunkizanami_documentation=self.webpackChunkizanami_documentation||[]).push([[5305],{2882:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>o});var i=t(5893),a=t(1151);const r={title:"Node js client"},s=void 0,l={id:"clients/node",title:"Node js client",description:"Install",source:"@site/v1/17-clients/03-node.mdx",sourceDirName:"17-clients",slug:"/clients/node",permalink:"/izanami/v1/clients/node",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Node js client"},sidebar:"defaultSidebar",previous:{title:"React client",permalink:"/izanami/v1/clients/react"},next:{title:"CLI",permalink:"/izanami/v1/clients/cli"}},c={},o=[{value:"Install",id:"install",level:2},{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:2},{value:"Configure the client:",id:"configure-the-client",level:3},{value:"Configs",id:"configs",level:3},{value:"Get a config",id:"get-a-config",level:3},{value:"Get the configs tree",id:"get-the-configs-tree",level:4},{value:"Features",id:"features",level:3},{value:"Check a feature",id:"check-a-feature",level:4},{value:"Get the features tree",id:"get-the-features-tree",level:4},{value:"Experiments",id:"experiments",level:3},{value:"Get an experiment",id:"get-an-experiment",level:4},{value:"Get experiments as tree",id:"get-experiments-as-tree",level:4},{value:"Get a variant",id:"get-a-variant",level:4},{value:"Mark variant displayed",id:"mark-variant-displayed",level:4},{value:"Mark variant won",id:"mark-variant-won",level:4},{value:"Express proxy",id:"express-proxy",level:2}];function d(e){const n={code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install izanami-node\n"})}),"\n",(0,i.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'const Izanami = require("izanami-node");\n'})}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.p,{children:"The node client expose convenient methods to call Izanami."}),"\n",(0,i.jsx)(n.h3,{id:"configure-the-client",children:"Configure the client:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'const izanamiConfig = Object.assign({}, Izanami.defaultConfig, {\n  host: "http://localhost:9000",\n  clientId: process.env.CLIENT_ID || "xxxx",\n  clientSecret: process.env.CLIENT_SECRET || "xxxx",\n});\n\n// Get a configs client\nconst configClient = Izanami.configClient(izanamiConfig);\n// Get a feature client\nconst featureClient = Izanami.featureClient(izanamiConfig);\n// Get a experiments client\nconst experimentsClient = Izanami.experimentsClient(izanamiConfig);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"configs",children:"Configs"}),"\n",(0,i.jsx)(n.h3,{id:"get-a-config",children:"Get a config"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'configClient.config("my.config.id").then((config) => {\n  console.log("The config is ", config);\n  tree.should.be.deep.equal({\n    value: "test",\n  });\n});\n'})}),"\n",(0,i.jsx)(n.h4,{id:"get-the-configs-tree",children:"Get the configs tree"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'configClient.configs("my.config.*").then((tree) => {\n  tree.should.be.deep.equal({\n    my: {\n      config: {\n        id: {\n          value: "test",\n        },\n        id2: {\n          another: {\n            value: "a value",\n          },\n        },\n      },\n    },\n  });\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"features",children:"Features"}),"\n",(0,i.jsx)(n.h4,{id:"check-a-feature",children:"Check a feature"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'featureClient.checkFeature("my.feature.id").then((active) => {\n  console.log("The feature is ", active);\n});\n'})}),"\n",(0,i.jsx)(n.p,{children:"Or with a context:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'featureClient\n  .checkFeature("my.feature.id", { client: "ragnard.lodbrock@gmail.com" })\n  .then((active) => {\n    console.log("The feature is ", active);\n  });\n'})}),"\n",(0,i.jsx)(n.h4,{id:"get-the-features-tree",children:"Get the features tree"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'featureClient.features("my.feature.*").then((tree) => {\n  tree.should.be.deep.equal({\n    my: {\n      feature: {\n        id: {\n          active: true,\n        },\n        id2: {\n          active: false,\n        },\n      },\n    },\n  });\n});\n'})}),"\n",(0,i.jsx)(n.p,{children:"Or with a context:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'featureClient\n  .features("my.feature.*", { client: "ragnard.lodbrock@gmail.com" })\n  .then((tree) => {\n    tree.should.be.deep.equal({\n      my: {\n        feature: {\n          id: {\n            active: true,\n          },\n          id2: {\n            active: false,\n          },\n        },\n      },\n    });\n  });\n'})}),"\n",(0,i.jsx)(n.h3,{id:"experiments",children:"Experiments"}),"\n",(0,i.jsx)(n.h4,{id:"get-an-experiment",children:"Get an experiment"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'experimentsClient.experiment("my.experiment.id").then((experiment) => {\n  //Empty json if the experiment doesn\'t exists\n  console.log("The experiment is ", experiment);\n});\n'})}),"\n",(0,i.jsx)(n.h4,{id:"get-experiments-as-tree",children:"Get experiments as tree"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'experimentsClient\n  .experiments("my.experiment.*", "ragnard.lodbrock@gmail.com")\n  .then((tree) => {\n    //Empty json if the experiment doesn\'t exists\n    console.log("The experiment is ", experiment);\n    tree.should.be.deep.equal({\n      my: {\n        experiment: {\n          id: {\n            variant: "A",\n          },\n          id2: {\n            variant: "B",\n          },\n        },\n      },\n    });\n  });\n'})}),"\n",(0,i.jsx)(n.h4,{id:"get-a-variant",children:"Get a variant"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'experimentsClient\n  .variantFor("my.experiment.id", "ragnard.lodbrock@gmail.com")\n  .then((variant) => {\n    //Empty json if the variant doesn\'t exists\n    console.log("The variant is ", variant);\n  });\n'})}),"\n",(0,i.jsx)(n.h4,{id:"mark-variant-displayed",children:"Mark variant displayed"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'experimentsClient\n  .displayed("my.experiment.id", "ragnard.lodbrock@gmail.com")\n  .then((__) => {\n    console.log("The variant is marked displayed");\n  });\n'})}),"\n",(0,i.jsx)(n.h4,{id:"mark-variant-won",children:"Mark variant won"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'experimentsClient\n  .won("my.experiment.id", "ragnard.lodbrock@gmail.com")\n  .then((__) => {\n    console.log("The variant is marked won");\n  });\n'})}),"\n",(0,i.jsx)(n.h2,{id:"express-proxy",children:"Express proxy"}),"\n",(0,i.jsxs)(n.p,{children:["You use express as a proxy to expose Izanami to the client side.\nYou can customize the api endpoints with the ",(0,i.jsx)(n.code,{children:"sessionPath"}),", ",(0,i.jsx)(n.code,{children:"experimentsDisplayedPath"})," and ",(0,i.jsx)(n.code,{children:"experimentsWonPath"}),"\nconfig options."]}),"\n",(0,i.jsxs)(n.p,{children:["Context (optional) and clientId (require) are extracted from the request, and forward respectively at the feature and experiments api; you can customize extraction by using your own methods with ",(0,i.jsx)(n.code,{children:"featureContextFromRequest"})," and ",(0,i.jsx)(n.code,{children:"experimentsClientIdFromRequest"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const app = express();\n\nIzanami.expressProxy({\n  sessionPath: \"/api/izanami\", // default '/api/me'\n  experimentsDisplayedPath, // default: '/api/experiments/displayed'\n  experimentsWonPath, // default: '/api/experiments/won'\n  featureClient, // Optional\n  featureContextFromRequest, //default: (req) => ({id: req.user_email})\n  experimentsClient, // Optional\n  experimentsClientIdFromRequest, //default: (req) => (req.user_email)\n  configClient, // Optional\n  app, // Express app\n  path: \"my.namespace.*\", // The pattern to filter experiments, configs and features\n});\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>s});var i=t(7294);const a={},r=i.createContext(a);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);