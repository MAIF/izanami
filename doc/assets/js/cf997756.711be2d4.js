"use strict";(self.webpackChunkizanami_documentation=self.webpackChunkizanami_documentation||[]).push([[1863],{3723:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var i=t(5893),a=t(1151);const s=t.p+"assets/images/login-b9deea45400927ae175a46c2564a85c8.png";var r=t(4866),o=t(5162);const l={title:"Spring / React tutorial"},c=void 0,d={id:"tutorials/spring",title:"Spring / React tutorial",description:"In this tutorial we're gonna see how to use Izanami in a springboot / react application.",source:"@site/v1/18-tutorials/01-spring.mdx",sourceDirName:"18-tutorials",slug:"/tutorials/spring",permalink:"/izanami/v1/tutorials/spring",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Spring / React tutorial"},sidebar:"defaultSidebar",previous:{title:"Tutorials",permalink:"/izanami/v1/tutorials/"},next:{title:"Oauth2 with keycloak",permalink:"/izanami/v1/tutorials/oauth2"}},h={},p=[{value:"Overview of the example application",id:"overview-of-the-example-application",level:2},{value:"Code organisation",id:"code-organisation",level:3},{value:"Running the application",id:"running-the-application",level:3},{value:"Step one : Configuring the java client",id:"step-one--configuring-the-java-client",level:2},{value:"Step two : feature flipping to switch the providers",id:"step-two--feature-flipping-to-switch-the-providers",level:2},{value:"Step three : feature flipping on the client side",id:"step-three--feature-flipping-on-the-client-side",level:2},{value:"Create a proxy",id:"create-a-proxy",level:3},{value:"Integrate Izanami with React",id:"integrate-izanami-with-react",level:3},{value:"Step four : A/B testing",id:"step-four--ab-testing",level:2},{value:"The spring plumbing",id:"the-spring-plumbing",level:3},{value:"Add routes to the proxy",id:"add-routes-to-the-proxy",level:3},{value:"The A/B testing with react",id:"the-ab-testing-with-react",level:3},{value:"Spring config",id:"spring-config",level:2}];function u(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"In this tutorial we're gonna see how to use Izanami in a springboot / react application."}),"\n",(0,i.jsxs)(n.p,{children:["We're go to use the izanami-tryout (",(0,i.jsx)(n.a,{href:"http://izanami-tryout.cleverapps.io",children:"http://izanami-tryout.cleverapps.io"}),") instance available online (thanks to ",(0,i.jsx)(n.a,{href:"https://www.clever-cloud.com/",children:"clever cloud"}),") to avoid running an instance on your machine."]}),"\n",(0,i.jsx)(n.p,{children:"::: warning"}),"\n",(0,i.jsx)(n.p,{children:'The "izanami-tryout" instance is reset frequently and should only be used to try Izanami and not for other purpose.'}),"\n",(0,i.jsx)(n.p,{children:":::"}),"\n",(0,i.jsx)(n.h2,{id:"overview-of-the-example-application",children:"Overview of the example application"}),"\n",(0,i.jsx)(n.p,{children:'This tutorial is based on an application that allow you to "mark as watched" the episodes of the tv shows you\'re watching.'}),"\n",(0,i.jsx)(n.p,{children:"There is basically three big features in this app :"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Search and select a tv show"}),"\n",(0,i.jsx)(n.li,{children:"Display the tv show you have selected"}),"\n",(0,i.jsx)(n.li,{children:"For a tv show, display seasons and episodes in order to mark the watched episodes"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"code-organisation",children:"Code organisation"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Code",src:t(2026).Z+"",width:"354",height:"665"})}),"\n",(0,i.jsx)(n.p,{children:"The code is organized as follow :"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"app : Global controller to serve the html and for login actions"}),"\n",(0,i.jsx)(n.li,{children:"izanami : The proxy to the izanami server to expose izanami data to the client"}),"\n",(0,i.jsx)(n.li,{children:"me : APIs and services concerning my tv shows and episodes"}),"\n",(0,i.jsx)(n.li,{children:"shows : APIs and services to search tv shows. Tv shows can come from multiple providers like tvdb or beta series."}),"\n",(0,i.jsx)(n.li,{children:"Application.java : This is the root class of the application"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"running-the-application",children:"Running the application"}),"\n",(0,i.jsx)(n.p,{children:"To run the application, you will need"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["JDK 11 : ",(0,i.jsx)(n.a,{href:"https://www.oracle.com/java/technologies/javase-jdk11-downloads.html",children:"https://www.oracle.com/java/technologies/javase-jdk11-downloads.html"})]}),"\n",(0,i.jsxs)(n.li,{children:["sbt : ",(0,i.jsx)(n.a,{href:"http://www.scala-sbt.org/download.html",children:"http://www.scala-sbt.org/download.html"})," or gradle ",(0,i.jsx)(n.a,{href:"https://gradle.org/install/",children:"https://gradle.org/install/"})]}),"\n",(0,i.jsxs)(n.li,{children:["Node.js 10 : ",(0,i.jsx)(n.a,{href:"https://nodejs.org/en/download/",children:"https://nodejs.org/en/download/"})]}),"\n",(0,i.jsxs)(n.li,{children:["Yarn : ",(0,i.jsx)(n.a,{href:"https://yarnpkg.com/lang/en/docs/install/",children:"https://yarnpkg.com/lang/en/docs/install/"})]}),"\n",(0,i.jsxs)(n.li,{children:["Docker Compose : ",(0,i.jsx)(n.a,{href:"https://docs.docker.com/compose/install/",children:"https://docs.docker.com/compose/install/"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Let's start by cloning Izanami :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/MAIF/izanami.git --depth=1\n"})}),"\n",(0,i.jsx)(n.p,{children:"Run Izanami locally :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd example\ndocker-compose -f docker-compose.izanami.yml up\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then we have to compile and run the js/react code"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"cd example/example-react/javascript\nyarn install \nyarn start \n"})}),"\n",(0,i.jsx)(n.p,{children:"Now there is a webpack server waiting to refresh the browser when the code change."}),"\n",(0,i.jsx)(n.p,{children:"Server depend of Izanami client in dev version. Publish it on the local repository :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sbt 'project jvm' '~publishLocal'\n"})}),"\n",(0,i.jsx)(n.p,{children:"Let's run the server side :"}),"\n",(0,i.jsxs)(r.Z,{children:[(0,i.jsx)(o.Z,{value:"gradle",label:"Gradle",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd example/example-spring/\ngradle bootRun \n"})})}),(0,i.jsx)(o.Z,{value:"sbt",label:"Sbt",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sbt 'project example-spring' ';clean;~run'\n"})})})]}),"\n",(0,i.jsx)(n.p,{children:"Like on the client side, the server will be restarted automatically when your code will change."}),"\n",(0,i.jsxs)(n.p,{children:["Now just open your browser and go to ",(0,i.jsx)(n.a,{href:"http://localhost:8080/",children:"http://localhost:8080/"})]}),"\n",(0,i.jsx)(n.p,{children:"You can log with any email :"}),"\n",(0,i.jsx)("img",{src:s,width:"70%"}),"\n",(0,i.jsx)(n.p,{children:"Then search a show"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Search",src:t(9366).Z+"",width:"2394",height:"702"})}),"\n",(0,i.jsx)(n.p,{children:"Select it"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Home",src:t(8414).Z+"",width:"2366",height:"590"})}),"\n",(0,i.jsx)(n.p,{children:"Go to the episodes to add the watched ones"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Show",src:t(1221).Z+"",width:"2390",height:"1292"})}),"\n",(0,i.jsx)(n.h2,{id:"step-one--configuring-the-java-client",children:"Step one : Configuring the java client"}),"\n",(0,i.jsx)(n.p,{children:"To use Izanami, you first need to instantiate a client."}),"\n",(0,i.jsxs)(n.p,{children:["In this example, we're going to use the izanami tryout instance (",(0,i.jsx)(n.a,{href:"http://izanami-tryout.cleverapps.io",children:"http://izanami-tryout.cleverapps.io"}),") deployed on ",(0,i.jsx)(n.a,{href:"https://www.clever-cloud.com/",children:"clever cloud"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The instance is configured on the ",(0,i.jsx)(n.code,{children:"src/main/resources/application.yml"})," file :"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'izanami:\n  host: "http://izanami-tryout.cleverapps.io"\n  client-id: myApiKeyClientId\n  client-secret: myApiKeyClientSecret\n  backend: SseBackend\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Go to ",(0,i.jsx)(n.a,{href:"http://izanami-tryout.cleverapps.io",children:"http://izanami-tryout.cleverapps.io"})," (admin / admin), create APIKey, and replace myApiKeyClientId / myApiKeyClientSecret with yours values."]}),"\n",(0,i.jsx)(n.p,{children:"And the client is registered as spring bean with the spring izanami starter."}),"\n",(0,i.jsxs)(n.p,{children:["The client is based on ",(0,i.jsx)(n.a,{href:"https://akka.io/",children:"Akka"}),", an ",(0,i.jsx)(n.code,{children:"ActorSystem"})," is provided but you can override it if needed."]}),"\n",(0,i.jsx)(n.p,{children:"::: warning"}),"\n",(0,i.jsx)(n.p,{children:"Izanami use non blocking call. In order to block call you have to configure a thread pool. This is done by configuring an akka dispatcher."}),"\n",(0,i.jsxs)(n.p,{children:["You can find an example on the ",(0,i.jsx)(n.code,{children:"src/main/resources/application.conf"})," :"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-hocon",children:'izanami-example.blocking-io-dispatcher {\n  type = Dispatcher\n  executor = "thread-pool-executor"\n  thread-pool-executor {\n    fixed-pool-size = 32\n  }\n  throughput = 1\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"On this example, we configure a thread pool of 32 threads. The reference to this dispatcher should be passed to the client :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'izanami:\n  host: "http://localhost:9000"\n  client-id: xxxx\n  client-secret: xxxx\n  backend: SseBackend\n  dispatcher: izanami-example.blocking-io-dispatcher # <- here \n'})}),"\n",(0,i.jsx)(n.p,{children:":::"}),"\n",(0,i.jsxs)(n.p,{children:["Now we have to create a ",(0,i.jsx)(n.code,{children:"FeatureClient"})," in order to use feature flipping."]}),"\n",(0,i.jsx)(n.p,{children:"In this example we use two spring profiles"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"dev"}),": Use on fallback from config and never call the server. You can use it during development if you don't an available Izanami instance."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"prod"})," : This profile will use a real Izanami server instance."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["So for ",(0,i.jsx)(n.code,{children:"FeatureClient"})," we have two configs :"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"application.yml"})," file (dev config):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'izanami:\n  host: http://localhost:9000\n  client-id: xxxx\n  client-secret: xxxx\n  backend: SseBackend\n  dispatcher: izanami-example.blocking-io-dispatcher\n  feature:\n    strategy:\n      type: DevStrategy\n    fallback: >\n      [\n        { "id": "mytvshows:season:markaswatched", "enabled": false },\n        { "id": "mytvshows:providers:tvdb", "enabled": true },\n        { "id": "mytvshows:providers:betaserie", "enabled": false },\n        { "id": "mytvshows:providers:omdb", "enabled": false }\n      ]\n    autocreate: true\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"application-prod.yml"})," file (dev config):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"izanami:\n  feature:\n    strategy:\n      type: CacheWithSseStrategy\n      polling-interval: 1 minute\n      patterns: [mytvshows:*]\n"})}),"\n",(0,i.jsx)(n.p,{children:"::: note"}),"\n",(0,i.jsx)(n.p,{children:"It's important to configure a fallback in case the server is not available."}),"\n",(0,i.jsx)(n.p,{children:":::"}),"\n",(0,i.jsx)(n.h2,{id:"step-two--feature-flipping-to-switch-the-providers",children:"Step two : feature flipping to switch the providers"}),"\n",(0,i.jsx)(n.p,{children:"The application integrate multiple providers in order to search a tvshow. We want to be able to switch the providers for some reason."}),"\n",(0,i.jsx)(n.p,{children:"We will first define keys for each providers :"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"mytvshows:providers:tvdb"})," : for tvdb"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"mytvshows:providers:betaserie"}),": for betaserie"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["As you can see the keys are arborescent. We first have ",(0,i.jsx)(n.code,{children:"mytvshows"})," to categorize the app then ",(0,i.jsx)(n.code,{children:"providers"})," and then the name of the provider."]}),"\n",(0,i.jsx)(n.p,{children:"This is a recommended pattern because"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"it will facilitate the keys administration"}),"\n",(0,i.jsx)(n.li,{children:"it allows the application to keep track of updates while limiting the amount of datas."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"As seen in the previous chapter, the features are declared as fallback in configuration file. Now let's create this features on the server."}),"\n",(0,i.jsxs)(n.p,{children:["Go to ",(0,i.jsx)(n.a,{href:"http://izanami-tryout.cleverapps.io/",children:"http://izanami-tryout.cleverapps.io/"})," and log in with ",(0,i.jsx)(n.code,{children:"admin@izanami.io"})," / ",(0,i.jsx)(n.code,{children:"admin123"}),"."]}),"\n",(0,i.jsx)(n.p,{children:'Click the "features" menu'}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Features",src:t(4310).Z+"",width:"2556",height:"526"})}),"\n",(0,i.jsx)(n.p,{children:'and click "Add Item" to add your key :'}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Features",src:t(9111).Z+"",width:"2554",height:"850"})}),"\n",(0,i.jsx)(n.p,{children:"Now your keys are created and enabled"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Features",src:t(9833).Z+"",width:"2554",height:"800"})}),"\n",(0,i.jsxs)(n.p,{children:["We now have to handle this in our application. The ",(0,i.jsx)(n.code,{children:"ShowsApi"})," class exposes two methods :"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"search"})," : to search a show"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"get"})," : to get a show, this seasons and episodes"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Let's inject, the ",(0,i.jsx)(n.code,{children:"FeatureClient"}),", ",(0,i.jsx)(n.code,{children:"TvdbShowsApi"})," (to dialog with tvdb) and ",(0,i.jsx)(n.code,{children:"BetaSerieApi"})," (to dialog with betaseries) :"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class ShowsApi implements Shows {\n\n    private final static Logger LOGGER = LoggerFactory.getLogger(ShowsApi.class);\n\n    private final FeatureClient featureClient;\n\n    private final TvdbShowsApi tvdbShowsApi;\n\n    private final BetaSerieApi betaSerieApi;\n\n    @Autowired\n    public ShowsApi(FeatureClient featureClient, TvdbShowsApi tvdbShowsApi, BetaSerieApi betaSerieApi) {\n        this.featureClient = featureClient;\n        this.tvdbShowsApi = tvdbShowsApi;\n        this.betaSerieApi = betaSerieApi;        \n    }\n    // ...\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now we can implement the ",(0,i.jsx)(n.code,{children:"search"})," and ",(0,i.jsx)(n.code,{children:"get"})," methods delegating the work on providers :"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Override\npublic List<ShowResume> search(String serie) {\n    Features features = this.featureClient.features("mytvshows:providers:*").get();\n    if (features.isActive("mytvshows:providers:tvdb")) {\n        return tvdbShowsApi.search(serie);\n    } else if (features.isActive("mytvshows:providers:betaserie")) {\n        return betaSerieApi.search(serie);\n    } else {\n        return List.empty();\n    }\n}\n\n@Override\npublic Option<Show> get(String id) {\n    Features features = this.featureClient.features("mytvshows:providers:*").get();\n    if (features.isActive("mytvshows:providers:tvdb")) {\n        return tvdbShowsApi.get(id);\n    } else if (features.isActive("mytvshows:providers:betaserie")) {\n        return betaSerieApi.get(id);\n    } else {\n        return Option.none();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"To be aware of what is happening, we had this code on the constructor to log Izanami events :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Autowired\npublic ShowsApi(FeatureClient featureClient, TvdbShowsApi tvdbShowsApi, BetaSerieApi betaSerieApi) {\n    this.featureClient = featureClient;\n    this.tvdbShowsApi = tvdbShowsApi;\n    this.betaSerieApi = betaSerieApi;\n    // Here a callback is invoked when there is change on the Izanami server side : \n    featureClient.onEvent("mytvshows:providers:*", event -> {\n        Match(event).of(\n                Case($(instanceOf(FeatureEvent.FeatureCreated.class)), c -> {\n                    LOGGER.info("{} is created with enable = {}", c.feature().id(), c.feature().enabled());\n                    return Done.getInstance();\n                }),\n                Case($(instanceOf(FeatureEvent.FeatureUpdated.class)), c -> {\n                    LOGGER.info("{} is updated with enable = {}", c.feature().id(), c.feature().enabled());\n                    return Done.getInstance();\n                }),\n                Case($(instanceOf(FeatureEvent.FeatureDeleted.class)), c -> {\n                    LOGGER.info("{} is deleted", c.id());\n                    return Done.getInstance();\n                })\n        );\n    });\n} \n'})}),"\n",(0,i.jsx)(n.p,{children:"If we search for a show, the provider will be tvdb :"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Search",src:t(2746).Z+"",width:"2374",height:"650"})}),"\n",(0,i.jsx)(n.p,{children:"Let's disable tvdb on Izanami :"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Search",src:t(6118).Z+"",width:"2556",height:"794"})}),"\n",(0,i.jsx)(n.p,{children:"We can see this on the log thanks to server sent event :"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Search",src:t(8315).Z+"",width:"2408",height:"62"})}),"\n",(0,i.jsx)(n.p,{children:"Now if we refresh the page and search :"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Search",src:t(9405).Z+"",width:"2366",height:"640"})}),"\n",(0,i.jsx)(n.p,{children:"The provider is betaserie"}),"\n",(0,i.jsx)(n.h2,{id:"step-three--feature-flipping-on-the-client-side",children:"Step three : feature flipping on the client side"}),"\n",(0,i.jsx)(n.p,{children:"On this step we're gonna flip on a button.\nThe product team has developed a new feature that was pushed on the master branch but the team don't want to activate it right now."}),"\n",(0,i.jsx)(n.h3,{id:"create-a-proxy",children:"Create a proxy"}),"\n",(0,i.jsx)(n.p,{children:"To use feature flipping on the client side we have to use a proxy.\nTo call Izanami APIs you need to provide authentication keys and we don't the keys to be exposed on the client side."}),"\n",(0,i.jsx)(n.p,{children:"Don't panic, the Izanami client provide a configurable proxy you can easily integrate in you application."}),"\n",(0,i.jsx)(n.p,{children:"First let's create the proxy using the configuration :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"izanami: \n  # ...\n  proxy:\n    feature:\n      patterns: mytvshows:*    \n"})}),"\n",(0,i.jsxs)(n.p,{children:["And then expose the features with the ",(0,i.jsx)(n.code,{children:"izanami.example.izanami.IzanamiController"})," :"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/izanami")\npublic class IzanamiProxyController {\n\n    private final Proxy proxy;\n\n    @Autowired\n    public IzanamiProxyController(Proxy proxy) {\n        this.proxy = proxy;\n    }\n\n\n    @GetMapping()\n    public CompletionStage<ResponseEntity<String>> proxy(\n            @CookieValue(value = "userId", required = false) String userId) {\n        \n        //We pass no context and no user id needed for experiments. \n        return proxy.statusAndStringResponse(Option.none(), Option.none())\n                .map(resp -> // The resp is a pair (status code, response body)\n                        new ResponseEntity<>(resp._2, HttpStatus.valueOf(resp._1))\n                ).toCompletableFuture();\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The context is exposed on ",(0,i.jsx)(n.code,{children:"GET /api/izanami"})]}),"\n",(0,i.jsx)(n.p,{children:"That it! Now let's see what's happening on the client side."}),"\n",(0,i.jsx)(n.h3,{id:"integrate-izanami-with-react",children:"Integrate Izanami with React"}),"\n",(0,i.jsx)(n.p,{children:"First install the client lib :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"yarn add react-izanami\n"})}),"\n",(0,i.jsxs)(n.p,{children:["And then configure Izanami. We will wrap the application inside the ",(0,i.jsx)(n.code,{children:"IzanamiProvider"})," react component :"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'import {IzanamiProvider} from \'react-izanami\';\n\n// ...\n\nconst IzanamiApp = props => (\n  <IzanamiProvider fetchFrom="/api/izanami">\n    <Router basename="/">\n        <Switch>\n          <Route path="/login" component={Login}/>\n          <PrivateRoute path="/" component={MainApp}/>\n        </Switch>\n    </Router>\n  </IzanamiProvider>\n);\n\nexport function init(node) {\n  ReactDOM.render(<IzanamiApp />, node);\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["As you can see, we set the ",(0,i.jsx)(n.code,{children:"fetchFrom"})," props with the proxy API we've exposed just before.\nWhen the IzanamiProvider will be mounted, the features will be fetched in order to display or not the related components."]}),"\n",(0,i.jsxs)(n.p,{children:["The product team has developed the ability to mark an entire season as watched.\nThis code is located in the ",(0,i.jsx)(n.code,{children:"pages/TvShow.js"})," file."]}),"\n",(0,i.jsxs)(n.p,{children:["The key ",(0,i.jsx)(n.code,{children:"mytvshows:season:markaswatched"})," will be used :"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'import {Feature, Enabled, Disabled} from \'react-izanami\';\n\n// ...\n\n<Feature path={"mytvshows:season:markaswatched"}>\n  <Enabled>\n    {s.allWatched && <button onClick={this.markSeasonWatched(s.number, false)} className="btn btn default pull-right addBtn"><i className="glyphicon glyphicon-ok"/></button>}\n    {!s.allWatched && <button  onClick={this.markSeasonWatched(s.number, true)} className="btn btn default pull-right addBtn"> ADD </button>}\n  </Enabled>\n  <Disabled>\n    <div></div>\n  </Disabled>\n</Feature>  \n'})}),"\n",(0,i.jsxs)(n.p,{children:["Verify the key ",(0,i.jsx)(n.code,{children:"mytvshows:season:markaswatched"})," is define in the fallback config.\nThen create the feature on the Izanami server instance. Keep the feature deactivated for the moment."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Izanami",src:t(8327).Z+"",width:"2550",height:"794"})}),"\n",(0,i.jsxs)(n.p,{children:["If you take a look at the network panel on the developers tools when you load the page,\nyou can see that there is a call on ",(0,i.jsx)(n.code,{children:"/api/izanami"})," with the following response :"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"{\n  experiments: {},\n  features: {\n    mytvshows: {\n      providers: {\n        tvdb: {\n          active: true\n        },\n        betaserie: {\n          active: true\n        },\n        omdb: {\n          active: false\n        }\n      },\n      season: {\n        markaswatched: {\n          active: false\n        }\n      }\n    }\n  },\n  configurations: {}\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The feature ",(0,i.jsx)(n.code,{children:"mytvshows:season:markaswatched"})," is not enabled."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Izanami",src:t(1633).Z+"",width:"2312",height:"1110"})}),"\n",(0,i.jsx)(n.p,{children:"Go to the Izanami server, activate the feature and reload the page"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Izanami",src:t(9131).Z+"",width:"2316",height:"998"})}),"\n",(0,i.jsxs)(n.p,{children:["A last thing, on the server side we need to take care that the feature is also togglable on the endpoint.\nThis is done on the ",(0,i.jsx)(n.code,{children:"MeController.java"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'\n@PostMapping(path = "/{serieId}/seasons/{seasonNumber}")\nResponseEntity<Me> markSeason(\n        @CookieValue(value = "userId") String userId,\n        @PathVariable("serieId") String serieId,\n        @PathVariable("seasonNumber") Long seasonNumber,\n        @RequestParam("watched") Boolean watched\n) {\n    return checkSecurityResponse(userId, () ->\n            featureClient.featureOrElse("mytvshows:season:markaswatched",\n                    () -> ResponseEntity.ok(meService.markSeason(userId, serieId, seasonNumber, watched)),\n                    () -> ResponseEntity.badRequest().<Me>body(null)\n            ).get()\n    );\n}\n\n'})}),"\n",(0,i.jsx)(n.h2,{id:"step-four--ab-testing",children:"Step four : A/B testing"}),"\n",(0,i.jsx)(n.p,{children:"Congrats! You've almost reached the end of this tutorial. The last step is to measure the best of two button using A/B testing."}),"\n",(0,i.jsx)(n.p,{children:"In this section, we will provide two variants of the same button : variant A and variant B and see which the better."}),"\n",(0,i.jsx)(n.p,{children:"To do that we have to"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Define a fallback for our experiment"}),"\n",(0,i.jsx)(n.li,{children:"Create the ExperimentsClient on the server side"}),"\n",(0,i.jsx)(n.li,{children:"Add new routes to the proxy"}),"\n",(0,i.jsx)(n.li,{children:"Define the button on the client side."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"the-spring-plumbing",children:"The spring plumbing"}),"\n",(0,i.jsxs)(n.p,{children:["Like for the features, let's define the ",(0,i.jsx)(n.code,{children:"ExperimentsClient"})," using the spring config:"]}),"\n",(0,i.jsx)(n.p,{children:"For the dev"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'izanami: \n  # ...\n  experiment:\n    fallback: >\n      [\n        {\n          "id": "mytvshows:gotoepisodes:button",\n          "name": "Test button",\n          "description": "Test button",\n          "enabled": true,\n          "variant": {\n            "id": "A",\n            "name": "Variant A",\n            "description": "Variant A"\n          }\n        }\n      ]\n    strategy:\n      type: DevStrategy\n'})}),"\n",(0,i.jsx)(n.p,{children:"For the prod"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"izanami: \n  # ...\n  experiment:\n    strategy:\n      type: FetchStrategy\n"})}),"\n",(0,i.jsx)(n.p,{children:"Here we define an experiment with the default variant (A)."}),"\n",(0,i.jsx)(n.p,{children:"The proxy config should be changed too in order to add the experiments client :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"izanami:\n  # ...\n  proxy:\n    feature:\n      patterns: mytvshows:*\n    experiment:\n      patterns: mytvshows:*\n"})}),"\n",(0,i.jsx)(n.p,{children:"In the previous chapter the proxy controller was"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@GetMapping()\npublic CompletionStage<ResponseEntity<String>> proxy(\n        @CookieValue(value = "userId", required = false) String userId) {\n         \n    return proxy.statusAndStringResponse(Option.none(), Option.none())\n            .map(resp -> // The resp is a pair (status code, response body)\n                    new ResponseEntity<>(resp._2, HttpStatus.valueOf(resp._1))\n            ).toCompletableFuture();\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Now we need to pass something to Izanami to identify the current user/session in order to get the right variant (A or B).\nWe will use the userId cookie used by the app to identify the current user :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@GetMapping()\npublic CompletionStage<ResponseEntity<String>> proxy(\n        @CookieValue(value = "userId", required = false) String userId) {\n    \n    //The user id needed for experiments \n    return proxy.statusAndStringResponse(Option.none(), Option.of(userId))\n            .map(resp -> // The resp is a pair (status code, response body)\n                    new ResponseEntity<>(resp._2, HttpStatus.valueOf(resp._1))\n            ).toCompletableFuture();\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Now if we hit the ",(0,i.jsx)(n.code,{children:"GET /api/izanami"})," API in the browser, the response will be"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'{\n  experiments: {\n    mytvshows: {\n      gotoepisodes: {\n        button: {\n          variant: "A"\n        }\n      }\n    }\n  },\n  features: {\n    mytvshows: {\n      providers: {\n        tvdb: {\n          active: false\n        },\n        betaserie: {\n          active: true\n        },\n        omdb: {\n          active: false\n        }\n      },\n      season: {\n        markaswatched: {\n          active: false\n        }\n      }\n    }\n  },\n  configurations: {}\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"For the moment the variant come from the callback because we haven't already define the experiment in Izanami."}),"\n",(0,i.jsx)(n.h3,{id:"add-routes-to-the-proxy",children:"Add routes to the proxy"}),"\n",(0,i.jsx)(n.p,{children:"Now, the spring beans are created, we can enrich the proxy controller to expose more routes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@PostMapping("/experiments/displayed")\npublic CompletionStage<ResponseEntity<String>> markDisplayed(\n        @RequestParam(value = "experiment") String id,\n        @CookieValue(value = "userId") String userId) {\n\n    return proxy.markVariantDisplayedStringResponse(id, userId)\n            .map(resp ->\n                    new ResponseEntity<>(resp._2, HttpStatus.valueOf(resp._1))\n            ).toCompletableFuture();\n}\n\n@PostMapping("/experiments/won")\npublic CompletionStage<ResponseEntity<String>> markWon(\n        @RequestParam(value = "experiment") String id,\n        @CookieValue(value = "userId", required = false) String userId) {\n\n    return proxy.markVariantWonStringResponse(id, userId)\n            .map(resp ->\n                    new ResponseEntity<>(resp._2, HttpStatus.valueOf(resp._1))\n            ).toCompletableFuture();\n\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"To measure which of the two variants is the more appreciated, we need to push events to the Izanami server.\nThis is why we expose this two routes :"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/api/izanami/experiments/displayed"})," will create an event when a button is displayed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/api/izanami/experiments/won"})," will create an event when a button is clicked"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The set up on server side is done, let's work on the client side."}),"\n",(0,i.jsx)(n.h3,{id:"the-ab-testing-with-react",children:"The A/B testing with react"}),"\n",(0,i.jsx)(n.p,{children:"The tested button is the link to access the episodes for a show :"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Izanami",src:t(4844).Z+"",width:"2304",height:"372"})}),"\n",(0,i.jsxs)(n.p,{children:["The client side is on the ",(0,i.jsx)(n.code,{children:"pages/MyTvshows.js"})," file."]}),"\n",(0,i.jsx)(n.p,{children:"First let's import some component :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"import {Experiment, Variant} from 'react-izanami';\n"})}),"\n",(0,i.jsx)(n.p,{children:"And then the code for the button :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'<Experiment path={"mytvshows:gotoepisodes:button"} notifyDisplay="/api/izanami/experiments/displayed" >\n    <Variant id={"A"}>\n      <Link to={`/tvshow/${id}`} onClick={this.markAsWon} className="btn pull-right" alt="consulter"><i className="fas fa-eye"></i></Link>\n    </Variant>\n    <Variant id={"B"}>\n      <Link to={`/tvshow/${id}`} onClick={this.markAsWon} className="btn pull-right" alt="consulter"><i className="glyphicon glyphicon-chevron-right"></i></Link>\n    </Variant>\n</Experiment>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["We have to set the following props on the ",(0,i.jsx)(n.code,{children:"Experiment"})," component :"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"path"}),": The key of the experiment"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/api/izanami/experiments/displayed"}),": The api to call when the component is displayed"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["And for the ",(0,i.jsx)(n.code,{children:"Variant"})," the props ",(0,i.jsx)(n.code,{children:"id"})," with the id of the variant."]}),"\n",(0,i.jsxs)(n.p,{children:["It remains a thing to do. We need to tell Izanami when a variant won. In our case the button won if we click on it.\nTo do this we set the ",(0,i.jsx)(n.code,{children:"onClick"})," props to call the server when a click is done."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"markAsWon"})," method :"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'markAsWon = () => {\n    Service.notifyWon("mytvshows:gotoepisodes:button");\n};\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"notifyWon"})," method :"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"export function notifyWon(key) {\n  return fetch(`/api/izanami/experiments/won?experiment=${key}`, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  });\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"That it !!!"}),"\n",(0,i.jsx)(n.p,{children:"Let's create the experiment on the Izanami server"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Izanami",src:t(1568).Z+"",width:"2556",height:"1362"})}),"\n",(0,i.jsx)(n.p,{children:"Ok the experiment is created"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Izanami",src:t(276).Z+"",width:"2558",height:"888"})}),"\n",(0,i.jsxs)(n.p,{children:["If I go the app using the user ",(0,i.jsx)(n.code,{children:"floki@gmail.com"}),", I got the variant A"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Izanami",src:t(5656).Z+"",width:"2332",height:"484"})}),"\n",(0,i.jsxs)(n.p,{children:["And with the user ",(0,i.jsx)(n.code,{children:"ragnar.lodbrock@gmail.com"}),", I got the variant B"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Izanami",src:t(7532).Z+"",width:"2312",height:"458"})}),"\n",(0,i.jsx)(n.p,{children:"After clicking multiple times on the buttons, the results are"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Izanami",src:t(8481).Z+"",width:"2556",height:"1360"})}),"\n",(0,i.jsx)(n.p,{children:"Congrats !!! You have win your first belt."}),"\n",(0,i.jsx)(n.h2,{id:"spring-config",children:"Spring config"}),"\n",(0,i.jsx)(n.p,{children:"Izanami can be used as a spring config server."}),"\n",(0,i.jsxs)(n.p,{children:["In this application, a spring config server is configured in the ",(0,i.jsx)(n.code,{children:"src/main/resources/bootstrap.yml"})," file.\nThe uri is pointing to ",(0,i.jsx)(n.code,{children:"http://localhost:9000/api/config-server/raw/mytvshow"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"This mean that you can define the following configurations in Izanami :"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"mytvshow:${applicatioName}:${profileName}:spring-config"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"mytvshow:spring-profiles:${profileName}:spring-config"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"mytvshow:spring-globals:spring-config"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In this application the title is configured with a property like this :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'\n    @Value("${config.title:Default title}")\n    private String title;\n'})}),"\n",(0,i.jsx)(n.p,{children:"So if you set this config in Izanami, the title could be pull from Izanami with spring config:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"mytvshow:application:default:spring-config"}),": ",(0,i.jsx)(n.code,{children:'{"config.title": "Izanami title"}'})]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},5162:(e,n,t)=>{t.d(n,{Z:()=>r});t(7294);var i=t(6905);const a={tabItem:"tabItem_Ymn6"};var s=t(5893);function r(e){let{children:n,hidden:t,className:r}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,i.Z)(a.tabItem,r),hidden:t,children:n})}},4866:(e,n,t)=>{t.d(n,{Z:()=>y});var i=t(7294),a=t(6905),s=t(2466),r=t(6550),o=t(469),l=t(1980),c=t(7392),d=t(12);function h(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:a}}=e;return{value:n,label:t,attributes:i,default:a}}))}(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function u(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const a=(0,r.k6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._X)(s),(0,i.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(a.location.search);n.set(s,e),a.replace({...a.location,search:n.toString()})}),[s,a])]}function x(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,s=p(e),[r,l]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!u({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:s}))),[c,h]=m({queryString:t,groupId:a}),[x,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,s]=(0,d.Nk)(t);return[a,(0,i.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:a}),j=(()=>{const e=c??x;return u({value:e,tabValues:s})?e:null})();(0,o.Z)((()=>{j&&l(j)}),[j]);return{selectedValue:r,selectValue:(0,i.useCallback)((e=>{if(!u({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),g(e)}),[h,g,s]),tabValues:s}}var g=t(2389);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(5893);function v(e){let{className:n,block:t,selectedValue:i,selectValue:r,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.o5)(),d=e=>{const n=e.currentTarget,t=l.indexOf(n),a=o[t].value;a!==i&&(c(n),r(a))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>l.push(e),onKeyDown:h,onClick:d,...s,className:(0,a.Z)("tabs__item",j.tabItem,s?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function b(e){let{lazy:n,children:t,selectedValue:a}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function w(e){const n=x(e);return(0,f.jsxs)("div",{className:(0,a.Z)("tabs-container",j.tabList),children:[(0,f.jsx)(v,{...e,...n}),(0,f.jsx)(b,{...e,...n})]})}function y(e){const n=(0,g.Z)();return(0,f.jsx)(w,{...e,children:h(e.children)},String(n))}},5656:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/ab_adisplayed-1f9d79b9fc872d962f2a1dd8bf5a0ff5.png"},7532:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/ab_bdisplayed-62efbcb82b2ff14a502d3a1ee7c7cd7f.png"},1568:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/ab_creation-d25c6dd20a56b8a2051aa21f3ed323fa.png"},276:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/ab_list-5e84274c167b8f1293caf5919b9f365f.png"},8481:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/ab_results-23abf6f6f56936a2b6d2e78842a40747.png"},4844:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/abtesting_button-d9eb103676b5ebb7ee7710f28d7fa6e7.png"},8327:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/allseasonwatch_feature-cf7ac85d8a301e7c0e36d8d7afade638.png"},1221:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/ashow-3a6841a02cb5e2ca2a072c5d65e5358d.png"},9405:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/betaserie_search-f487cbfa46ac4ed462ffc41b490f00da.png"},2026:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/code_orga-291d28d63d6e1ec79b8a22c04882e6d2.png"},9111:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/create_feature-4e49c709c0912241e5e3c4c41a9ac46f.png"},8315:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/disabled_log-7e4cd39c590815d5d162e298cc6c435f.png"},4310:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/features-fd6da9501f85d79a84f59ce6b66cabae.png"},9833:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/features2-4029513ca3a9b408b55ea89c79a4386a.png"},8414:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/home-ce2ed885eb64eef69a325174b90067e6.png"},9366:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/search-6645e4e3295d41d8169d0907d3f39ab4.png"},1633:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/seasonaswatched_disabled-63d6f12e8c8d360cc4b92418ed1cfbbd.png"},9131:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/seasonaswatched_enabled-51ba337d9bc1d6fdf9f21fb27572ea2d.png"},6118:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/tvdb_disabled-41489a12f1e6fe17716c269d2f3e9b4d.png"},2746:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/tvdb_search-3eb952c66e507b3a30315296bbce2f2c.png"},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>r});var i=t(7294);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);