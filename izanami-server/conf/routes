# Routes
# This file defines all application routes (Higher priority routes first)
# https://www.playframework.com/documentation/latest/ScalaRouting
# ~~~~

# An example controller showing a sample home page
GET     /                                   controllers.HomeController.index


#Configs
GET     /api/configs                        controllers.effect.ConfigControllerEff.list(pattern: String ?= "*", page: Int ?= 1, pageSize: Int ?= 15)
POST    /api/configs                        controllers.effect.ConfigControllerEff.create()
GET     /api/configs/:id                    controllers.effect.ConfigControllerEff.get(id)
PUT     /api/configs/:id                    controllers.effect.ConfigControllerEff.update(id)
PATCH   /api/configs/:id                    controllers.effect.ConfigControllerEff.patch(id)
DELETE  /api/configs/:id                    controllers.effect.ConfigControllerEff.delete(id)
GET     /api/tree/configs                   controllers.effect.ConfigControllerEff.tree(pattern: String ?= "*")
GET     /api/configs.ndjson                 controllers.effect.ConfigControllerEff.download()
POST    /api/configs.ndjson                 controllers.effect.ConfigControllerEff.upload()
GET     /api/counts/configs                 controllers.effect.ConfigControllerEff.count()

#Configs spring
GET     /api/config-server/raw/:rootKey/:appName/:profile   controllers.effect.SpringConfigControllerEff.raw(rootKey, appName, profile)

#Features
GET     /api/features                       controllers.effect.FeatureControllerEff.list(pattern: String ?= "*", page: Int ?= 1, pageSize: Int ?= 15, active: Boolean ?= false)
POST    /api/features/_checks               controllers.effect.FeatureControllerEff.listWithContext(pattern: String ?= "*", page: Int ?= 1, pageSize: Int ?= 15)
POST    /api/features                       controllers.effect.FeatureControllerEff.create()
DELETE  /api/features                       controllers.effect.FeatureControllerEff.deleteAll(pattern: String ?= "*")
GET     /api/features/:id                   controllers.effect.FeatureControllerEff.get(id: String)
PUT     /api/features/:id                   controllers.effect.FeatureControllerEff.update(id)
PATCH   /api/features/:id                   controllers.effect.FeatureControllerEff.patch(id)
DELETE  /api/features/:id                   controllers.effect.FeatureControllerEff.delete(id)
GET     /api/features/:id/check             controllers.effect.FeatureControllerEff.check(id)
POST    /api/features/:id/check             controllers.effect.FeatureControllerEff.checkWithContext(id)
GET     /api/features.ndjson                controllers.effect.FeatureControllerEff.download()
POST    /api/features.ndjson                controllers.effect.FeatureControllerEff.upload()
POST    /api/tree/features                  controllers.effect.FeatureControllerEff.tree(pattern: String ?= "*", flat: Boolean = false)
GET     /api/tree/features                  controllers.effect.FeatureControllerEff.treeGet(pattern: String ?= "*", flat: Boolean = false)
GET     /api/counts/features                controllers.effect.FeatureControllerEff.count()

#GlobalScript
GET     /api/scripts                        controllers.effect.GlobalScriptControllerEff.list(pattern: String ?= "*", name_only: Option[Boolean], page: Int ?= 1, pageSize: Int ?= 15)
POST    /api/scripts                        controllers.effect.GlobalScriptControllerEff.create()
DELETE  /api/scripts                        controllers.effect.GlobalScriptControllerEff.deleteAll(pattern: String ?= "*")
GET     /api/scripts/:id                    controllers.effect.GlobalScriptControllerEff.get(id)
PUT     /api/scripts/:id                    controllers.effect.GlobalScriptControllerEff.update(id)
PATCH   /api/scripts/:id                    controllers.effect.GlobalScriptControllerEff.patch(id)
DELETE  /api/scripts/:id                    controllers.effect.GlobalScriptControllerEff.delete(id)
GET     /api/scripts.ndjson                 controllers.effect.GlobalScriptControllerEff.download()
POST    /api/scripts.ndjson                 controllers.effect.GlobalScriptControllerEff.upload()

#Experiments
GET     /api/experiments                    controllers.effect.ExperimentControllerEff.list(pattern: String ?= "*")
GET     /api/tree/experiments               controllers.effect.ExperimentControllerEff.tree(pattern: String ?= "*", clientId: String)
POST    /api/experiments                    controllers.effect.ExperimentControllerEff.create()
GET     /api/experiments.ndjson             controllers.effect.ExperimentControllerEff.downloadExperiments()
POST    /api/experiments.ndjson             controllers.effect.ExperimentControllerEff.uploadExperiments()
GET     /api/experiments/events.ndjson      controllers.effect.ExperimentControllerEff.downloadEvents()
POST    /api/experiments/events.ndjson      controllers.effect.ExperimentControllerEff.uploadEvents()
DELETE  /api/experiments                    controllers.effect.ExperimentControllerEff.deleteAll(pattern: String ?= "*")
GET     /api/experiments/:id                controllers.effect.ExperimentControllerEff.get(id, clientId: Option[String])
PUT     /api/experiments/:id                controllers.effect.ExperimentControllerEff.update(id)
PATCH   /api/experiments/:id                controllers.effect.ExperimentControllerEff.patch(id)
DELETE  /api/experiments/:id                controllers.effect.ExperimentControllerEff.delete(id)
GET     /api/experiments/:id/variant        controllers.effect.ExperimentControllerEff.getVariantForClient(id: String, clientId: String)
POST    /api/experiments/:id/displayed      controllers.effect.ExperimentControllerEff.variantDisplayed(id: String, clientId: String)
POST    /api/experiments/:id/won            controllers.effect.ExperimentControllerEff.variantWon(id: String, clientId: String)
GET     /api/experiments/:id/results        controllers.effect.ExperimentControllerEff.results(id: String)
GET     /api/counts/experiments             controllers.effect.ExperimentControllerEff.count()

#Webhooks
GET     /api/webhooks                       controllers.effect.WebhookControllerEff.list(pattern: String ?= "*", page: Int ?= 1, pageSize: Int ?= 15)
GET     /api/webhooks.ndjson                controllers.effect.WebhookControllerEff.download()
POST    /api/webhooks.ndjson                controllers.effect.WebhookControllerEff.upload()
POST    /api/webhooks                       controllers.effect.WebhookControllerEff.create()
GET     /api/webhooks/:id                   controllers.effect.WebhookControllerEff.get(id)
PUT     /api/webhooks/:id                   controllers.effect.WebhookControllerEff.update(id)
PATCH   /api/webhooks/:id                   controllers.effect.WebhookControllerEff.patch(id)
DELETE  /api/webhooks/:id                   controllers.effect.WebhookControllerEff.delete(id)
GET     /api/counts/webhooks                controllers.effect.WebhookControllerEff.count()

#Users
GET     /api/users                          controllers.effect.UserControllerEff.list(pattern: String ?= "*", page: Int ?= 1, pageSize: Int ?= 15)
GET     /api/users.ndjson                   controllers.effect.UserControllerEff.download()
POST    /api/users.ndjson                   controllers.effect.UserControllerEff.upload()
POST    /api/users                          controllers.effect.UserControllerEff.create()
DELETE  /api/users                          controllers.effect.UserControllerEff.deleteAll(pattern: String ?= "*")
GET     /api/users/:id                      controllers.effect.UserControllerEff.get(id)
PUT     /api/users/:id                      controllers.effect.UserControllerEff.update(id)
PATCH   /api/users/:id                      controllers.effect.UserControllerEff.patch(id)
DELETE  /api/users/:id                      controllers.effect.UserControllerEff.delete(id)
GET     /api/counts/users                   controllers.effect.UserControllerEff.count()

#Apikeys
GET     /api/apikeys                        controllers.effect.ApikeyControllerEff.list(pattern: String ?= "*", page: Int ?= 1, pageSize: Int ?= 15)
GET     /api/apikeys.ndjson                 controllers.effect.ApikeyControllerEff.download()
POST    /api/apikeys.ndjson                 controllers.effect.ApikeyControllerEff.upload()
POST    /api/apikeys                        controllers.effect.ApikeyControllerEff.create()
GET     /api/apikeys/:id                    controllers.effect.ApikeyControllerEff.get(id)
PUT     /api/apikeys/:id                    controllers.effect.ApikeyControllerEff.update(id)
PATCH   /api/apikeys/:id                    controllers.effect.ApikeyControllerEff.patch(id)
DELETE  /api/apikeys/:id                    controllers.effect.ApikeyControllerEff.delete(id)
GET     /api/counts/apikeys                 controllers.effect.ApikeyControllerEff.count()


GET     /api/events                         controllers.effect.EventsControllerEff.allEvents(pattern: String ?= "*", domains: String ?= "")
GET     /api/events/:domain                 controllers.effect.EventsControllerEff.eventsForADomain(domain: String, patterns: String ?= "")

# Search
GET     /api/_search                        controllers.effect.SearchControllerEff.search(patterns: String, features: Boolean ?= true, configs: Boolean ?= true, experiments: Boolean ?= true, scripts: Boolean ?= true)
GET     /api/_health                        controllers.effect.HealthCheckControllerEff.check

#Authentication
POST    /api/login                          controllers.effect.AuthControllerEff.authenticate()
GET     /api/logout                         controllers.effect.AuthControllerEff.logout()

GET     /api/bo/loggers/:name/level         controllers.BackOfficeController.getLogLevel(name)
PUT     /api/bo/loggers/:name/level         controllers.BackOfficeController.changeLogLevel(name, newLevel: Option[String])
GET     /api/bo/loggers                     controllers.BackOfficeController.getAllLoggers()

GET     /api/swagger.json                   controllers.SwaggerController.swagger()
GET     /swagger/ui                         controllers.SwaggerController.swaggerUi()


# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                       controllers.Assets.versioned(file: String)

GET     /login                              controllers.HomeController.login()
GET     /metrics                            controllers.MetricController.metricsEndpoint()

GET     /*other                             controllers.HomeController.otherRoutes(other)