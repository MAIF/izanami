# Routes
# This file defines all application routes (Higher priority routes first)
# https://www.playframework.com/documentation/latest/ScalaRouting
# ~~~~


### NoDocs ###
GET     /                                   controllers.HomeController.index()

#########################################################################
#                           Configs                                     #
#########################################################################

###
#  summary: list configs
#  tags:
#    - Config Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/controllers.dto.config.ConfigListResult'
###
GET     /api/configs                        controllers.ConfigController.list(pattern: String ?= "*", page: Int ?= 1, pageSize: Int ?= 15, render: String ?= "flat")
###
#  summary: Create a Config
#  tags:
#    - Config Endpoints
#  requestBody:
#    description: Create a new config
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/domains.config.Config'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.config.Config'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
POST    /api/configs                        controllers.ConfigController.create()
###
#  summary: get a config
#  tags:
#    - Config Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.config.Config'
###
GET     /api/configs/:id                    controllers.ConfigController.get(id)
###
#  summary: Update a Config
#  tags:
#    - Config Endpoints
#  requestBody:
#    description: Update a config
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/domains.config.Config'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.config.Config'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
PUT     /api/configs/:id                    controllers.ConfigController.update(id)
###
#  summary: patch a config
#  tags:
#    - Config Endpoints
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/PatchRequest'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/domains.config.Config'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
PATCH   /api/configs/:id                    controllers.ConfigController.patch(id)
###
#  summary: Delete a Config
#  tags:
#    - Config Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.config.Config'
###
DELETE  /api/configs/:id                    controllers.ConfigController.delete(id)
###
#  summary: Configs as tree
#  tags:
#    - Config Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: object
###
GET     /api/tree/configs                   controllers.ConfigController.tree(pattern: String ?= "*")
###
#  summary: Downlaod Configs
#  tags:
#    - Config Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/nd-json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/domains.config.Config'
###
GET     /api/configs.ndjson                 controllers.ConfigController.download()
###
#  summary: Upload Configs
#  tags:
#    - Config Endpoints
#  requestBody:
#    description: Update a config
#    required: true
#    content:
#      application/nd-json:
#        schema:
#          $ref: '#/components/schemas/domains.config.Config'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/controllers.dto.import.ImportResultDto'
###
POST    /api/configs.ndjson                 controllers.ConfigController.upload(strategy: String ?= "Keep")
###
#  summary: Count Configs
#  tags:
#    - Config Endpoints
#  responses:
#    200:
#      description: success
###
GET     /api/counts/configs                 controllers.ConfigController.count()

###
#  summary: Configs for spring config server
#  tags:
#    - Config Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: object
###
GET     /api/config-server/raw/:rootKey/:appName/:profile   controllers.SpringConfigController.raw(rootKey, appName, profile)


#########################################################################
#                           Features                                    #
#########################################################################

###
#  summary: list features
#  tags:
#    - Feature Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/controllers.dto.feature.FeatureListResult'
###
GET     /api/features                       controllers.FeatureController.list(pattern: String ?= "*", page: Int ?= 1, pageSize: Int ?= 15, active: Boolean ?= false, render: String ?= "flat")
###
#  summary: check features
#  tags:
#    - Feature Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/controllers.dto.feature.FeatureListResult'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
POST    /api/features/_checks               controllers.FeatureController.listWithContext(pattern: String ?= "*", page: Int ?= 1, pageSize: Int ?= 15)
###
#  summary: copy features
#  tags:
#    - Feature Endpoints
#  requestBody:
#    description: Update a config
#    required: true
#    content:
#      application/nd-json:
#        schema:
#          $ref: '#/components/schemas/controllers.dto.feature.CopyRequest'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/controllers.dto.CopyResponse'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
POST    /api/features/_copy                 controllers.FeatureController.copyNode()
###
#  summary: create feature
#  tags:
#    - Feature Endpoints
#  requestBody:
#    description: Create a config
#    required: true
#    content:
#      application/nd-json:
#        schema:
#          $ref: '#/components/schemas/domains.feature.Feature'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.feature.Feature'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
POST    /api/features                       controllers.FeatureController.create()
###
#  summary: delete features by pattern
#  tags:
#    - Feature Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
DELETE  /api/features                       controllers.FeatureController.deleteAll(pattern: String ?= "*")
###
#  summary: get a feature
#  tags:
#    - Feature Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.feature.Feature'
###
GET     /api/features/:id                   controllers.FeatureController.get(id: String)
###
#  summary: update a feature
#  tags:
#    - Feature Endpoints
#  requestBody:
#    description: Create a config
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/domains.feature.Feature'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.feature.Feature'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
PUT     /api/features/:id                   controllers.FeatureController.update(id)
###
#  summary: patch a feature
#  tags:
#    - Feature Endpoints
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/PatchRequest'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/domains.config.Config'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
PATCH   /api/features/:id                   controllers.FeatureController.patch(id)
###
#  summary: delete a feature
#  tags:
#    - Feature Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.feature.Feature'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
DELETE  /api/features/:id                   controllers.FeatureController.delete(id)
###
#  summary: check a feature by id
#  tags:
#    - Feature Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
###
GET     /api/features/:id/check             controllers.FeatureController.check(id)
###
#  summary: check a feature by id with context
#  tags:
#    - Feature Endpoints
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          type: object
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
###
POST    /api/features/:id/check             controllers.FeatureController.checkWithContext(id)
###
#  summary: download feature
#  tags:
#    - Feature Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/nd-json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.feature.Feature'
###
GET     /api/features.ndjson                controllers.FeatureController.download()
###
#  summary: download feature
#  tags:
#    - Feature Endpoints
#  requestBody:
#    description: Create a config
#    required: true
#    content:
#      application/nd-json:
#        schema:
#          $ref: '#/components/schemas/domains.feature.Feature'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/controllers.dto.import.ImportResultDto'
###
POST    /api/features.ndjson                controllers.FeatureController.upload(strategy: String ?= "Keep")
###
#  summary: feature as tree
#  tags:
#    - Feature Endpoints
#  requestBody:
#    description: Context
#    required: true
#    content:
#      application/json:
#        type: object
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: object
###
POST    /api/tree/features                  controllers.FeatureController.tree(pattern: String ?= "*", flat: Boolean = false)
###
#  summary: feature as tree
#  tags:
#    - Feature Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: object
###
GET     /api/tree/features                  controllers.FeatureController.treeGet(pattern: String ?= "*", flat: Boolean = false)
###
#  summary: count features
#  tags:
#    - Feature Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: number
###
GET     /api/counts/features                controllers.FeatureController.count()


#########################################################################
#                        GlobalScript                                   #
#########################################################################


###
#  summary: list global script
#  tags:
#    - GlobalScript Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/controllers.dto.GlobalScriptListResult'
###
GET     /api/scripts                        controllers.GlobalScriptController.list(pattern: String ?= "*", name_only: Option[Boolean], page: Int ?= 1, pageSize: Int ?= 15)

###
#  summary: create global script
#  tags:
#    - GlobalScript Endpoints
#  requestBody:
#    description: Create a script
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/domains.script.GlobalScript'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.script.GlobalScript'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
POST    /api/scripts                        controllers.GlobalScriptController.create()

###
#  summary: delete by pattern
#  tags:
#    - GlobalScript Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
DELETE  /api/scripts                        controllers.GlobalScriptController.deleteAll(pattern: String ?= "*")

###
#  summary: debug a script execution
#  tags:
#    - GlobalScript Endpoints
#  requestBody:
#    description: Create a script
#    required: true
#    content:
#      application/json:
#        schema:
#          type: object
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#               type: object
###
POST    /api/scripts/_debug                 controllers.GlobalScriptController.debug()

###
#  summary: get by id script
#  tags:
#    - GlobalScript Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.script.GlobalScript'
###
GET     /api/scripts/:id                    controllers.GlobalScriptController.get(id)

###
#  summary: update by id script
#  tags:
#    - GlobalScript Endpoints
#  requestBody:
#    description: Update a script
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/domains.script.GlobalScript'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.script.GlobalScript'
###
PUT     /api/scripts/:id                    controllers.GlobalScriptController.update(id)

###
#  summary: patch a global script
#  tags:
#    - GlobalScript Endpoints
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/PatchRequest'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/domains.script.GlobalScript'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
PATCH   /api/scripts/:id                    controllers.GlobalScriptController.patch(id)

###
#  summary: delete by by id
#  tags:
#    - GlobalScript Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/domains.script.GlobalScript'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
DELETE  /api/scripts/:id                    controllers.GlobalScriptController.delete(id)

###
#  summary: download global script
#  tags:
#    - GlobalScript Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/nd-json:
#          schema:
#            $ref: '#/components/schemas/domains.script.GlobalScript'
###
GET     /api/scripts.ndjson                 controllers.GlobalScriptController.download()

###
#  summary: download global script
#  tags:
#    - GlobalScript Endpoints
#  requestBody:
#    description: Create a script
#    required: true
#    content:
#      application/nd-json:
#        schema:
#          $ref: '#/components/schemas/domains.script.GlobalScript'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/controllers.dto.import.ImportResultDto'
###
POST    /api/scripts.ndjson                 controllers.GlobalScriptController.upload(strategy: String ?= "Keep")



#########################################################################
#                        Experiments                                    #
#########################################################################

###
#  summary: list experiments
#  tags:
#    - Experiment Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/controllers.dto.ExperimentListResult'
###
GET     /api/experiments                    controllers.ExperimentController.list(pattern: String ?= "*", page: Int ?= 1, pageSize: Int ?= 15, render: String ?= "flat")
###
#  summary: experiments as tree
#  tags:
#    - Experiment Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              type: object
###
GET     /api/tree/experiments               controllers.ExperimentController.tree(pattern: String ?= "*", clientId: String)
###
#  summary: create experiment
#  tags:
#    - Experiment Endpoints
#  requestBody:
#    description: Create an experiment
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/domains.abtesting.Experiment'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.abtesting.Experiment'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
POST    /api/experiments                    controllers.ExperimentController.create()
###
#  summary: download experiments
#  tags:
#    - Experiment Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/nd-json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.abtesting.Experiment'
###
GET     /api/experiments.ndjson             controllers.ExperimentController.downloadExperiments()
###
#  summary: upload experiments
#  tags:
#    - Experiment Endpoints
#  requestBody:
#    description: Create an experiment
#    required: true
#    content:
#      application/nd-json:
#        schema:
#          $ref: '#/components/schemas/domains.abtesting.Experiment'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/controllers.dto.import.ImportResultDto'
###
POST    /api/experiments.ndjson             controllers.ExperimentController.uploadExperiments(strategy: String ?= "Keep")
###
#  summary: download experiments
#  tags:
#    - Experiment Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/nd-json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.abtesting.ExperimentVariantEvent'
###
GET     /api/experiments/events.ndjson      controllers.ExperimentController.downloadEvents()
###
#  summary: upload experiments
#  tags:
#    - Experiment Endpoints
#  requestBody:
#    description: Create an experiment
#    required: true
#    content:
#      application/nd-json:
#        schema:
#          $ref: '#/components/schemas/domains.abtesting.ExperimentVariantEvent'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/controllers.dto.import.ImportResultDto'
###
POST    /api/experiments/events.ndjson      controllers.ExperimentController.uploadEvents()
###
#  summary: delete experiments by pattern
#  tags:
#    - Experiment Endpoints
#  responses:
#    200:
#      description: success
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
DELETE  /api/experiments                    controllers.ExperimentController.deleteAll(pattern: String ?= "*")
###
#  summary: get an experiment
#  tags:
#    - Experiment Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.abtesting.Experiment'
###
GET     /api/experiments/:id                controllers.ExperimentController.get(id, clientId: Option[String])
###
#  summary: update an experiment
#  tags:
#    - Experiment Endpoints
#  requestBody:
#    description: Update an experiment
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/domains.abtesting.Experiment'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.abtesting.Experiment'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
PUT     /api/experiments/:id                controllers.ExperimentController.update(id)
###
#  summary: patch an experiment
#  tags:
#    - Experiment Endpoints
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/PatchRequest'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/domains.abtesting.Experiment'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
PATCH   /api/experiments/:id                controllers.ExperimentController.patch(id)
###
#  summary: delete an experiment
#  tags:
#    - Experiment Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.abtesting.Experiment'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
DELETE  /api/experiments/:id                controllers.ExperimentController.delete(id)
###
#  summary: delete an experiment
#  description: Get the variant for the client
#  tags:
#    - Experiment Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.abtesting.Variant'
###
GET     /api/experiments/:id/variant        controllers.ExperimentController.getVariantForClient(id: String, clientId: String)
###
#  summary: mark a variant as displayed
#  description: This variant was displayed
#  tags:
#    - Experiment Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.abtesting.ExperimentVariantEvent'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
POST    /api/experiments/:id/displayed      controllers.ExperimentController.variantDisplayed(id: String, clientId: String)
###
#  summary: mark a variant as won
#  description: This variant has won
#  tags:
#    - Experiment Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.abtesting.ExperimentVariantEvent'
###
POST    /api/experiments/:id/won            controllers.ExperimentController.variantWon(id: String, clientId: String)
###
#  summary: get the current result
#  description: Get the current result for this campaign
#  tags:
#    - Experiment Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.abtesting.ExperimentResult'
###
GET     /api/experiments/:id/results        controllers.ExperimentController.results(id: String)
###
#  summary: get the count of experiments
#  tags:
#    - Experiment Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              type: number
###
GET     /api/counts/experiments             controllers.ExperimentController.count()



#########################################################################
#                           Webhooks                                    #
#########################################################################

###
#  summary: list whebhooks
#  tags:
#    - Webhook Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/controllers.dto.WebhookListResult'
###
GET     /api/webhooks                       controllers.WebhookController.list(pattern: String ?= "*", page: Int ?= 1, pageSize: Int ?= 15)
###
#  summary: download webhooks
#  tags:
#    - Webhook Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/nd-json:
#          schema:
#            $ref: '#/components/schemas/domains.webhook.Webhook'
###
GET     /api/webhooks.ndjson                controllers.WebhookController.download()
###
#  summary: upload webhooks
#  tags:
#    - Webhook Endpoints
#  requestBody:
#    description: Create an experiment
#    required: true
#    content:
#      application/nd-json:
#        schema:
#          $ref: '#/components/schemas/domains.webhook.Webhook'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/controllers.dto.import.ImportResultDto'
###
POST    /api/webhooks.ndjson                controllers.WebhookController.upload(strategy: String ?= "Keep")
###
#  summary: create whebhook
#  tags:
#    - Webhook Endpoints
#  requestBody:
#    description: Create a whebhook
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/domains.webhook.Webhook'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.webhook.Webhook'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
POST    /api/webhooks                       controllers.WebhookController.create()
###
#  summary: get a whebhook
#  tags:
#    - Webhook Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.webhook.Webhook'
###
GET     /api/webhooks/:id                   controllers.WebhookController.get(id)
###
#  summary: update a whebhook
#  tags:
#    - Webhook Endpoints
#  requestBody:
#    description: Update a whebhook
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/domains.webhook.Webhook'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.webhook.Webhook'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
PUT     /api/webhooks/:id                   controllers.WebhookController.update(id)
###
#  summary: patch a webhook
#  tags:
#    - Webhook Endpoints
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/PatchRequest'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/domains.webhook.Webhook'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
PATCH   /api/webhooks/:id                   controllers.WebhookController.patch(id)
###
#  summary: delete a whebhook
#  tags:
#    - Webhook Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.webhook.Webhook'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
DELETE  /api/webhooks/:id                   controllers.WebhookController.delete(id)
###
#  summary: count whebhooks
#  tags:
#    - Webhook Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              type: number
###
GET     /api/counts/webhooks                controllers.WebhookController.count()


#########################################################################
#                               User                                    #
#########################################################################

###
#  summary: list users
#  tags:
#    - User Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/controllers.dto.UserListResult'
###
GET     /api/users                          controllers.UserController.list(pattern: String ?= "*", page: Int ?= 1, pageSize: Int ?= 15)
###
#  summary: download user
#  tags:
#    - User Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/nd-json:
#          schema:
#            $ref: '#/components/schemas/domains.user.User'
###
GET     /api/users.ndjson                   controllers.UserController.download()
###
#  summary: upload user
#  tags:
#    - User Endpoints
#  requestBody:
#    description: users as nd-json format
#    required: true
#    content:
#      application/nd-json:
#        schema:
#          $ref: '#/components/schemas/domains.user.User'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/controllers.dto.import.ImportResultDto'
###
POST    /api/users.ndjson                   controllers.UserController.upload(strategy: String ?= "Keep")
###
#  summary: create a User
#  tags:
#    - User Endpoints
#  requestBody:
#    description: create a user
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/domains.user.User'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.user.User'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
POST    /api/users                          controllers.UserController.create()
###
#  summary: delete users
#  tags:
#    - User Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              type: object
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
DELETE  /api/users                          controllers.UserController.deleteAll(pattern: String ?= "*")
###
#  summary: get a User
#  tags:
#    - User Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.user.User'
###
GET     /api/users/:id                      controllers.UserController.get(id)
###
#  summary: update a User
#  tags:
#    - User Endpoints
#  requestBody:
#    description: Update a user
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/domains.user.User'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.user.User'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
PUT     /api/users/:id                      controllers.UserController.update(id)
###
#  summary: patch a webhook
#  tags:
#    - Webhook Endpoints
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/PatchRequest'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/domains.user.User'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
PATCH   /api/users/:id                      controllers.UserController.patch(id)
###
#  summary: delete a User
#  tags:
#    - User Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.user.User'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
DELETE  /api/users/:id                      controllers.UserController.delete(id)
###
#  summary: count users
#  tags:
#    - User Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              type: number
###
GET     /api/counts/users                   controllers.UserController.count()


#########################################################################
#                             Apikeys                                   #
#########################################################################

###
#  summary: list apikeys
#  tags:
#    - ApiKey Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/controllers.dto.ApikeyListResult'
###
GET     /api/apikeys                        controllers.ApikeyController.list(pattern: String ?= "*", page: Int ?= 1, pageSize: Int ?= 15)
###
#  summary: download apikeys
#  tags:
#    - ApiKey Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.apikey.Apikey'
###
GET     /api/apikeys.ndjson                 controllers.ApikeyController.download()
###
#  summary: upload apikeys
#  tags:
#    - ApiKey Endpoints
#  requestBody:
#    description: create an Apikey
#    required: true
#    content:
#      application/nd-json:
#        schema:
#          $ref: '#/components/schemas/domains.apikey.Apikey'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/controllers.dto.import.ImportResultDto'
###
POST    /api/apikeys.ndjson                 controllers.ApikeyController.upload(strategy: String ?= "Keep")
###
#  summary: create an apikey
#  tags:
#    - ApiKey Endpoints
#  requestBody:
#    description: create an Apikey
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/domains.apikey.Apikey'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.apikey.Apikey'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
POST    /api/apikeys                        controllers.ApikeyController.create()
###
#  summary: get an apikey
#  tags:
#    - ApiKey Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.apikey.Apikey'
###
GET     /api/apikeys/:id                    controllers.ApikeyController.get(id)
###
#  summary: update an apikey
#  tags:
#    - ApiKey Endpoints
#  requestBody:
#    description: update an Apikey
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/domains.apikey.Apikey'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/domains.apikey.Apikey'
###
PUT     /api/apikeys/:id                    controllers.ApikeyController.update(id)
###
#  summary: patch an apikey
#  tags:
#    - ApiKey Endpoints
#  requestBody:
#    required: true
#    content:
#      application/json:
#        schema:
#          $ref: '#/components/schemas/PatchRequest'
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/domains.apikey.Apikey'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
PATCH   /api/apikeys/:id                    controllers.ApikeyController.patch(id)
###
#  summary: delete an apikey
#  tags:
#    - ApiKey Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/domains.apikey.Apikey'
#    400:
#      description: functionnal errors
#      content:
#        application/json:
#          schema:
#            items:
#              $ref: '#/components/schemas/ApiErrors'
###
DELETE  /api/apikeys/:id                    controllers.ApikeyController.delete(id)
###
#  summary: count apikeys
#  tags:
#    - ApiKey Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: number
###
GET     /api/counts/apikeys                 controllers.ApikeyController.count()


#########################################################################
#                              Events                                   #
#########################################################################

###
#  summary: event with SSE
#  tags:
#    - Event Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: object
###
GET     /api/events                         controllers.EventsController.allEvents(pattern: String ?= "*", domains: String ?= "")
###
#  summary: event by domains with SSE
#  tags:
#    - Event Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: object
###
GET     /api/events/:domain                 controllers.EventsController.eventsForADomain(domain: String, patterns: String ?= "")

#########################################################################
#                              Search                                   #
#########################################################################

###
#  summary: search
#  tags:
#    - Search Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: object
###
GET     /api/_search                        controllers.SearchController.search(patterns: String, features: Boolean ?= true, configs: Boolean ?= true, experiments: Boolean ?= true, scripts: Boolean ?= true)

#########################################################################
#                            Healthcheck                                #
#########################################################################

###
#  summary: health
#  tags:
#    - Admin Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: object
###
GET     /api/_health                        controllers.HealthCheckController.check()
###
#  summary: metrics for prometheus
#  tags:
#    - Admin Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: object
###
GET     /metrics                            controllers.MetricController.metricsEndpoint()

#########################################################################
#                               Auth                                    #
#########################################################################

###
#  summary: login
#  tags:
#    - Auth Endpoints
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: object
###
POST    /api/login                          controllers.AuthController.authenticate()
###
#  summary: logout
#  tags:
#    - Auth Endpoints
#  requestBody:
#    description: create an Apikey
#    required: true
#    content:
#      application/json:
#        schema:
#          type: object
#  responses:
#    200:
#      description: success
#      content:
#        application/json:
#          schema:
#            type: object
###
GET     /logout                         controllers.HomeController.logout()




#OPTIONS /api/auth/login                            controllers.OAuthController.appLoginPageOptions()
GET     /api/auth/login                            controllers.OAuthController.appLoginPage()
GET     /api/auth/logout                           controllers.OAuthController.appLogout()
GET     /api/auth/callback                         controllers.OAuthController.appCallback()
POST    /api/auth/callback                         controllers.OAuthController.appCallback()



### NoDocs ###
GET     /api/bo/loggers/:name/level         controllers.BackOfficeController.getLogLevel(name)
### NoDocs ###
PUT     /api/bo/loggers/:name/level         controllers.BackOfficeController.changeLogLevel(name, newLevel: Option[String])
### NoDocs ###
GET     /api/bo/loggers                     controllers.BackOfficeController.getAllLoggers()
### NoDocs ###
GET     /api/bo/appinfo                     controllers.BackOfficeController.appInfo()

### NoDocs ###
GET     /docs/swagger-ui/*file              controllers.Assets.at(path:String="/public/lib/swagger-ui", file:String)

### NoDocs ###
GET     /assets/*file                       controllers.Assets.versioned(file: String)

### NoDocs ###
GET     /login                              controllers.HomeController.login()

### NoDocs ###
GET     /*other                             controllers.HomeController.otherRoutes(other)