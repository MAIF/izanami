# https://www.playframework.com/documentation/latest/Configuration

include "base.conf"

play.application.loader = "IzanamiLoader"

//play.allowGlobalApplication = true

play.http {
  secret.key = "izanamiSecretabitmorelongbecauseitdoesntworkwithshorttoken"
  secret.key = ${?APPLICATION_SECRET}
  context="/"
  context=${?APPLICATION_CONTEXT}
}
http.port=9000
http.port=${?HTTP_PORT}

izanami {
  mode = "prod"
  mode = ${?IZANAMI_MODE}
  contextPath = ${play.http.context}
  baseURL = "/"
  baseURL = ${?APPLICATION_BASE_URL}
  namespace = "izanami"
  patchEnabled = false
  confirmationDialog = false
  headerHost = "X-Forwarded-For"
  headerHost = ${?HOST_HEADER_NAME}
;   zoneId="America/Los_Angeles"
  zoneId= ${?ZONE_ID}
  metrics {
    verbose = false
    verbose = ${?METRICS_VERBOSE}
    includeCount = false
    includeCount = ${?METRICS_COUNT}
    refresh = 5 minutes
    refresh = ${?METRICS_COUNT_REFRESH_INTERVAL}
    console {
      enabled = false
      enabled = ${?METRICS_CONSOLE_ENABLED}
      interval = 5 minutes
      interval = ${?METRICS_CONSOLE_INTERVAL}
    }
    log {
      enabled = false
      enabled = ${?METRICS_LOG_ENABLED}
      interval = 5 minutes
      interval = ${?METRICS_LOG_INTERVAL}
    }
    http {
      defaultFormat = "json" # json / prometheus
      defaultFormat = ${?METRICS_HTTP_FORMAT}
    }
    kafka {
      enabled = false
      enabled = ${?METRICS_KAFKA_ENABLED}
      topic = "izanami-metrics"
      topic = ${?METRICS_KAFKA_TOPIC}
      pushInterval = 30 seconds
      pushInterval = ${?METRICS_KAFKA_INTERVAL}
      format = "json" # json / prometheus
    }
    elastic {
      enabled = false
      enabled = ${?METRICS_ELASTIC_ENABLED}
      index = "'izanami-metrics-'yyyy-MM-dd"
      index = ${?METRICS_ELASTIC_INDEX}
      pushInterval = 30 seconds
      pushInterval = ${?METRICS_ELASTIC_INTERVAL}
    }
  }
  events {
    store = "InMemory"
    store = ${?IZANAMI_EVENT_STORE}
    distributed {
      topic = "izanami"
      topic = ${?DISTRIBUTED_TOPIC}
      backpressureBufferSize = 500
      backpressureBufferSize = ${?DISTRIBUTED_BACKPRESSURE_BUFFER_SIZE}
    }
    redis {
      topic = "izanami:events"
      topic = ${?REDIS_TOPIC}
      backpressureBufferSize = 500
      backpressureBufferSize = ${?REDIS_BACKPRESSURE_BUFFER_SIZE}
    }
    kafka {
      topic = "izanami"
      topic = ${?KAFKA_TOPIC}
    }
    inmemory {
      backpressureBufferSize = 500
      backpressureBufferSize = ${?IN_MEMORY_BACKPRESSURE_BUFFER_SIZE}
    }
  }
  db {
    default = "LevelDB" // Redis, LevelDB, InMemory, Elastic, Mongo, InMemoryWithDb, Dynamo
    default = ${?IZANAMI_DATABASE}
    leveldb {
      parentPath = "target/leveldb"
      parentPath = ${?LEVEL_DB_PARENT_PATH}
    }
    postgresql {
      driver = org.postgresql.Driver
      url = "jdbc:postgresql://localhost:5432/izanami"
      url = ${?POSTGRESQL_DATABASE_URL}
      url = ${?JDBC_DATABASE_URL}
      username = izanami
      username = ${?POSTGRESQL_USER}
      username = ${?POSTGRESQL_ADDON_USER}
      password = izanami
      password = ${?POSTGRESQL_PASSWORD}
      password = ${?POSTGRESQL_ADDON_PASSWORD}
      connectionPoolSize = 32
      connectionPoolSize = ${?POSTGRESQL_CONNECTION_POOL_SIZE}
    }
    redis {
      type = "master"
      type = ${?REDIS_TYPE}
      host = "localhost"
      host = ${?REDIS_HOST}
      port = 6379
      port = ${?REDIS_PORT}
      masterId = "redismaster"
      masterId = ${?REDIS_MASTER_ID}
      poolSize = 10
      poolSize = ${?REDIS_POOLSIZE}
      password = ${?REDIS_PASSWORD}
      databaseId = ${?REDIS_DATABASE_ID}
    }
    kafka {
      host = "127.0.0.1"
      host = ${?KAFKA_HOST}
      port = "29092"
      port = ${?KAFKA_PORT}
      servers = ${izanami.db.kafka.host}":"${izanami.db.kafka.port}
      servers = ${?KAFKA_HOSTS_AND_PORTS}
      keyPass = ${?KAFKA_PASSWORD}
      keystore {
        location = ${?KAFKA_KEYSTORE_LOCATION}
      }
      truststore {
        location = ${?KAFKA_TRUSTORE_LOCATION}
      }
    }
    elastic {
      host = "127.0.0.1"
      host = ${?ELASTIC_HOST}
      port = "9200"
      port = ${?ELASTIC_PORT}
      scheme = "http"
      scheme = ${?ELASTIC_SCHEME}
      user = ${?ELASTIC_USER}
      password = ${?ELASTIC_PASSWORD}
      automaticRefresh = false
    }
    mongo {
      url = "mongodb://localhost:27017/izanami"
      url = ${?MONGODB_ADDON_URI}
    }
    inMemoryWithDb {
      db = "LevelDB"
      db = ${?IN_MEMORY_WITH_DB_DB}
      pollingInterval = ${?IN_MEMORY_WITH_DB_POLLING_INTERVAL}
    }
    dynamo {
      tableName = "izanami"
      tableName = ${?DYNAMO_TABLE_NAME}
      eventsTableName = "izanami_experimentevents"
      eventsTableName = ${?DYNAMO_EVENTS_TABLE_NAME}
      region = "eu-west-1"
      region = ${?DYNAMO_REGION}
      host = "dynamodb."${izanami.db.dynamo.region}".amazonaws.com"
      host = ${?DYNAMO_HOST}
      port = 443
      port = ${?DYNAMO_PORT}
      tls = true
      tls = ${?DYNAMO_TLS}
      parallelism = 32
      parallelism = ${?DYNAMO_PARRALLELISM}
      accessKey = "dummy-access-key"
      accessKey = ${?DYNAMO_ACCESS_KEY}
      secretKey = "dummy-secret-key"
      secretKey = ${?DYNAMO_SECRET_KEY}
    }
  }
  jdbc-transaction-dispatcher {
    executor = "thread-pool-executor"
    throughput = 1
    thread-pool-executor {
      fixed-pool-size = ${izanami.db.postgresql.connectionPoolSize}
    }
  }
  jdbc-connection-dispatcher {
    executor = "thread-pool-executor"
    throughput = 1
    thread-pool-executor {
      fixed-pool-size = ${izanami.db.postgresql.connectionPoolSize}
    }
  }
  blocking-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 50
    }
    throughput = 1
  }
  level-db-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 1
      fixed-pool-size = ${?LEVEL_DB_POOLSIZE}
    }
    throughput = 1
  }
  oauth2 {
    enabled = false
    enabled = ${?OAUTH2_ENABLED}
    authorizeUrl = "https://localhost:8943/auth/realms/master/protocol/openid-connect/auth"
    authorizeUrl = ${?OAUTH2_AUTHORIZE_URL}
    tokenUrl = 	"https://localhost:8943/auth/realms/master/protocol/openid-connect/token"
    tokenUrl = 	${?OAUTH2_TOKEN_URL}
    userInfoUrl = "https://localhost:8943/auth/realms/master/protocol/openid-connect/userinfo"
    userInfoUrl = ${?OAUTH2_USER_INFO_URL}
    introspectionUrl = 	"https://localhost:8943/auth/realms/master/protocol/openid-connect/token/introspect"
    introspectionUrl = 	${?OAUTH2_INTROSPECTION_URL}
    loginUrl = "https://localhost:8943/auth/realms/master/protocol/openid-connect/auth"
    loginUrl = ${?OAUTH2_LOGIN_URL}
    logoutUrl = "https://localhost:8943/auth/realms/master/protocol/openid-connect/logout"
    logoutUrl = ${?OAUTH2_LOGOUT_URL}
    clientId = "izanami"
    clientId = ${?OAUTH2_CLIENT_ID}
//    clientSecret = "secret"
    clientSecret = ${?OAUTH2_CLIENT_SECRET}
    mtls = {
      enabled = false
      enabled = ${?OAUTH2_MTLS_ENABLED}
      ssl-config {
        trustManager {
          stores = [
            {
              path: "./keycloak-tls/server.pem"
              path: ${?OAUTH2_TRUSTSTORE_PATH}
              type: "PEM"
              type: ${?OAUTH2_TRUSTSTORE_TYPE}
              password=${?OAUTH2_TRUSTSTORE_PASSWORD}
            }
          ]
          algorithm = null
          prototype.stores {
            type = null
            path = null
            data = null
            password = null
          }
        }
        keyManager {
          stores = [
            {
              path = "./keycloak-tls/client.p12"
              path = ${?OAUTH2_KEYSTORE_PATH}
              password = "izanami"
              password = ${?OAUTH2_KEYSTORE_PASSWORD}
              type = "PKCS12"
              type = ${?OAUTH2_KEYSTORE_TYPE}
            }
          ]
          algorithm = null
          prototype.stores {
            type = null
            path = null
            data = null
            password = null
          }
        }
        default = false
        revocationLists = []
        loose {
          allowWeakProtocols = false
          allowWeakCiphers = false
          disableHostnameVerification = false
          disableSNI = false
          acceptAnyCertificate=false
        }
        enabledCipherSuites = []
        disabledSignatureAlgorithms = ["MD2", "MD4", "MD5"]
        disabledKeyAlgorithms = ["RSA keySize < 2048", "DSA keySize < 2048", "EC keySize < 224"]
        hostnameVerifierClass = null
        sslParameters {
          clientAuth = "default"
          protocols = []
        }

        debug {
          # Enable all debugging
          all = false
          # Enable sslengine / socket tracing
          ssl = false
          # Enable SSLContext tracing
          sslctx = false
          # Enable key manager tracing
          keymanager = false
          # Enable trust manager tracing
          trustmanager = false
        }
        protocol = "TLSv1.2"
        enabledProtocols = [
          "TLSv1.2",
          "TLSv1.1",
          "TLSv1"
        ]
      }
    }
    scope = "openid profile email name admin authorizedPatterns"
    scope = ${?OAUTH2_SCOPE}
    jwtVerifier {
      enabled = false
      enabled =  ${?OAUTH2_JWT_VERIFIER_ENABLED}
      type = "rsa"
      type = ${?OAUTH2_JWT_VERIFIER_TYPE}
      size = 256
      size = ${?OAUTH2_JWT_VERIFIER_RSA_SIZE}
      size = ${?OAUTH2_JWT_VERIFIER_HS_SIZE}
      size = ${?OAUTH2_JWT_VERIFIER_ES_SIZE}
      secret = ${?OAUTH2_JWT_VERIFIER_HS_SECRET}
      publicKey = "your key"
      publicKey = ${?OAUTH2_JWT_VERIFIER_RSA_PUBLIC_KEY}
      publicKey = ${?OAUTH2_JWT_VERIFIER_ES_PUBLIC_KEY}
      privateKey = ${?OAUTH2_JWT_VERIFIER_RSA_PRIVATE_KEY}
      privateKey = ${?OAUTH2_JWT_VERIFIER_ES_PRIVATE_KEY}
      url = ${?OAUTH2_JWT_VERIFIER_JWKS_URL}
      headers = ${?OAUTH2_JWT_VERIFIER_JWKS_HEADERS}
      timeout = ${?OAUTH2_JWT_VERIFIER_JWKS_TIMEOUT}
    }
    readProfileFromToken = true
    readProfileFromToken = ${?OAUTH2_READ_FROM_TOKEN}
    useCookie = false
    useCookie = ${?OAUTH2_USE_COOKIE}
    useJson = false
    useJson = ${?OAUTH2_USE_JSON}
    idField = "sub"
    idField = "preferred_username"
    idField = ${?OAUTH2_ID_FIELD}
    accessTokenField = "access_token"
    accessTokenField = ${?OAUTH2_ACCESS_TOKEN_FIELD}
    nameField = "preferred_username"
    nameField = ${?OAUTH2_NAME_FIELD}
    emailField = "email"
    emailField = ${?OAUTH2_EMAIL_FIELD}
    adminField = "admin"
    adminField = ${?OAUTH2_ADMIN_FIELD}
    authorizedPatternField = "authorizedPatterns"
    authorizedPatternField = ${?OAUTH2_AUTHORIZED_PATTERN_FIELD}
    defaultPatterns = "*"
    defaultPatterns = ${?OAUTH2_DEFAULT_PATTERN}
    izanamiManagedUser = true
    izanamiManagedUser = ${?OAUTH2_IZANAMI_MANAGED_USERS}
    admins = [ "izanami_admin", ${?OAUTH2_ADMINS_1}, ${?OAUTH2_ADMINS_2}, ${?OAUTH2_ADMINS_3}, ${?OAUTH2_ADMINS_4}, ${?OAUTH2_ADMINS_5}]
  }
  filter {
    type = "Default"
    type = ${?IZANAMI_FILTER_TYPE}
    otoroshi  {
      issuer = "Otoroshi"
      issuer = ${?OTOROSHI_ISSUER}
      sharedKey = "none"
      sharedKey = ${?CLAIM_SHAREDKEY}
      headerClaim = "Otoroshi-Claim"
      headerClaim = ${?FILTER_CLAIM_HEADER_NAME}
      headerRequestId = "Otoroshi-Request-Id"
      headerRequestId = ${?FILTER_REQUEST_ID_HEADER_NAME}
      headerGatewayState = "Otoroshi-State"
      headerGatewayState = ${?FILTER_GATEWAY_STATE_HEADER_NAME}
      headerGatewayStateResp = "Otoroshi-State-Resp"
      headerGatewayStateResp = ${?FILTER_GATEWAY_STATE_RESP_HEADER_NAME}
    }
    default {
      allowedPaths = [${?FILTER_EXLUSION}, ${?FILTER_EXLUSION_1}, ${?FILTER_EXLUSION_2}, ${?FILTER_EXLUSION_3}, "/", "/login", "/api/login","/logout","/api/logout","/favicon.ico","/assets/.*","/docs/.*","/explorer.*","/users.*", "/experiments.*", "/scripts.*", "/webhooks.*", "/configurations.*", "/features.*", "/api/auth/.*"]
      sharedKey = "none"
      sharedKey = ${?FILTER_CLAIM_SHAREDKEY}
      cookieClaim = "Izanami"
      cookieClaim = ${?FILTER_COOKIE_NAME}
      issuer = "Izanami"
      issuer = ${?FILTER_ISSUER}
      apiKeys {
        headerClientId = "Izanami-Client-Id"
        headerClientId = ${?FILTER_CLAIM_HEADER_CLIENT_ID_NAME}
        headerClientSecret = "Izanami-Client-Secret"
        headerClientSecret = ${?FILTER_CLAIM_HEADER_CLIENT_SECRET_NAME}
      }
    }
  }
  logout {
    url = "/logout"
    url = ${?LOGOUT_URL}
  }
  config {
    db {
      type = ${izanami.db.default}
      type = ${?CONFIG_DATABASE}
      import = ${?CONFIG_IMPORT}
      conf {
        namespace = ${izanami.namespace}":configuration"
        namespace = ${?CONFIG_NAMESPACE}
      }
    }
  }
  features {
    db {
      type = ${izanami.db.default}
      type = ${?FEATURE_DATABASE}
      import = ${?FEATURE_IMPORT}
      conf {
        namespace = ${izanami.namespace}":features"
        namespace = ${?FEATURE_NAMESPACE}
      }
    }
  }
  globalScript {
    db {
      type = ${izanami.db.default}
      type = ${?SCRIPT_DATABASE}
      import = ${?SCRIPT_IMPORT}
      conf {
        namespace = ${izanami.namespace}":globalscripts"
        namespace = ${?SCRIPT_NAMESPACE}
      }
    }
  }
  experiment {
    db {
      type = ${izanami.db.default}
      type = ${?EXPERIMENT_DATABASE}
      import = ${?EXPERIMENT_IMPORT}
      conf {
        namespace = ${izanami.namespace}":experiment"
        namespace = ${?EXPERIMENT_NAMESPACE}
      }
    }
  }
  experimentEvent {
    db {
      type = ${izanami.db.default}
      type = ${?EXPERIMENT_EVENT_DATABASE}
      import = ${?EXPERIMENT_EVENT_IMPORT}
      conf {
        namespace = ${izanami.namespace}":experimentevent"
        namespace = ${?EXPERIMENT_EVENT_NAMESPACE}
      }
    }
  }
  webhook {
    events {
      group = 20
      within = "1 second"
      nbMaxErrors = 10
      errorReset = "30 second"
    }
    db {
      type = ${izanami.db.default}
      type = ${?WEBHOOK_DATABASE}
      import = ${?WEBHOOK_IMPORT}
      conf {
        namespace = ${izanami.namespace}":webhook"
        namespace = ${?WEBHOOK_NAMESPACE}
      }
    }
  }
  user {
    db {
      type = ${izanami.db.default}
      type = ${?USER_DATABASE}
      import = ${?USER_IMPORT}
      conf {
        namespace = ${izanami.namespace}":user"
        namespace = ${?USER_NAMESPACE}
      }
    }
    initialize {
      userId = "admin"
      userId = ${?INITIAL_USER_ID}
      password = "admin123"
      password = ${?INITIAL_USER_PASSWORD}
    }
  }
  apikey {
    db {
      type = ${izanami.db.default}
      type = ${?APIKEY_DATABASE}
      import = ${?APIKEY_IMPORT}
      conf {
        namespace = ${izanami.namespace}":apikey"
        namespace = ${?APIKEY_NAMESPACE}
      }
    }
    initialize {
      clientId = ${?INITIAL_APIKEY_CLIENT_ID}
      clientSecret = ${?INITIAL_APIKEY_CLIENT_SECRET}
      authorizedPatterns = "*"
      authorizedPatterns = ${?INITIAL_APIKEY_AUTHORIZED_PATTERN}
    }
  }
  patch {
    db {
      type = ${izanami.db.default}
      type = ${?PATCH_DATABASE}
      conf {
        namespace = ${izanami.namespace}":patchs"
        namespace = ${?PATCH_NAMESPACE}
      }
    }
  }

  cluster {
    seed-node-host = "127.0.0.1"
    seed-node-host = ${?AKKA_CLUSTER_SEED_NODE_HOST}
    seed-node-host = ${?IZANAMI_PORT_2551_TCP_ADDR}
    seed-node-port = 2551
    seed-node-port = ${?AKKA_CLUSTER_SEED_NODE_PORT}
    seed-node-port = ${?IZANAMI_PORT_2551_TCP_PORT}
  }
}

cluster {
  system-name = "DistributedEvent"
  akka {
    actor {
      provider = "cluster"
      provider = ${?AKKA_CLUSTER_PROVIDER}
      serializers {
        eventMessage = "domains.events.CustomSerializer"
      }
      serialization-bindings {
        "domains.events.DistributedEventsPublisherActor$Message" = eventMessage
      }
    }
    remote {
      log-remote-lifecycle-events = on
      netty.tcp {
        hostname = "127.0.0.1"
        hostname = ${?AKKA_CLUSTER_HOST}
        port = 2551
        port = ${?AKKA_CLUSTER_PORT}
        bind-hostname = "127.0.0.1" # internal (bind) hostname
        bind-hostname = ${?AKKA_CLUSTER_BIND_HOST}
        bind-port = ${cluster.akka.remote.netty.tcp.port}
        bind-port = ${?AKKA_CLUSTER_BIND_PORT}
      }
    }
    cluster {
      seed-nodes = ["akka.tcp://"${cluster.system-name}"@"${izanami.cluster.seed-node-host}":"${izanami.cluster.seed-node-port}]
      seed-nodes = ${?AKKA_CLUSTER_SEED_NODES}
    }
  }
}



# Properties for akka.kafka.ConsumerSettings can be
# defined in this section or a configuration section with
# the same layout.
akka.kafka.consumer {
  # Tuning property of scheduled polls.
  poll-interval = 50ms

  # Tuning property of the `KafkaConsumer.poll` parameter.
  # Note that non-zero value means that blocking of the thread that
  # is executing the stage will be blocked.
  poll-timeout = 50ms

  # The stage will be await outstanding offset commit requests before
  # shutting down, but if that takes longer than this timeout it will
  # stop forcefully.
  stop-timeout = 30s

  # How long to wait for `KafkaConsumer.close`
  close-timeout = 20s

  # If offset commit requests are not completed within this timeout
  # the returned Future is completed `TimeoutException`.
  commit-timeout = 15s

  # If the KafkaConsumer can't connect to the broker the poll will be
  # aborted after this timeout. The KafkaConsumerActor will throw
  # org.apache.kafka.common.errors.WakeupException which will be ignored
  # until max-wakeups limit gets exceeded.
  wakeup-timeout = 10s

  # After exceeding maxinum wakeups the consumer will stop and the stage will fail.
  max-wakeups = 10

  # Fully qualified config path which holds the dispatcher configuration
  # to be used by the KafkaConsumerActor. Some blocking may occur.
  use-dispatcher = "akka.kafka.default-dispatcher"

  # Properties defined by org.apache.kafka.clients.consumer.ConsumerConfig
  # can be defined in this configuration section.
  kafka-clients {
  }
}

akka.kafka.producer {
  # Tuning parameter of how many sends that can run in parallel.
  parallelism = 100

  # How long to wait for `KafkaProducer.close`
  close-timeout = 60s

  # Fully qualified config path which holds the dispatcher configuration
  # to be used by the producer stages. Some blocking may occur.
  # When this value is empty, the dispatcher configured for the stream
  # will be used.
  use-dispatcher = "akka.kafka.default-dispatcher"

  # Properties defined by org.apache.kafka.clients.producer.ProducerConfig
  # can be defined in this configuration section.
  kafka-clients {
  }
}
